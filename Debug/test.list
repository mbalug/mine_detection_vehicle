
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000300  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004d8  080004e0  000104e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080004d8  080004d8  000104d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080004dc  080004dc  000104dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000104e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000024  20000000  080004e0  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000024  080004e0  00020024  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000104e0  2**0
                  CONTENTS, READONLY
  9 .debug_info   00001e6c  00000000  00000000  00010510  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000005ce  00000000  00000000  0001237c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000002f8  00000000  00000000  00012950  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  00012c48  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000ea4  00000000  00000000  00012ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000eb4  00000000  00000000  00013d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00014c50  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000c68  00000000  00000000  00014ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00015934  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000000 	.word	0x20000000
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080004c0 	.word	0x080004c0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000004 	.word	0x20000004
 8000214:	080004c0 	.word	0x080004c0

08000218 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000218:	b480      	push	{r7}
 800021a:	b087      	sub	sp, #28
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000222:	2300      	movs	r3, #0
 8000224:	617b      	str	r3, [r7, #20]
 8000226:	2300      	movs	r3, #0
 8000228:	613b      	str	r3, [r7, #16]
 800022a:	2300      	movs	r3, #0
 800022c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800022e:	2300      	movs	r3, #0
 8000230:	617b      	str	r3, [r7, #20]
 8000232:	e076      	b.n	8000322 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000234:	2201      	movs	r2, #1
 8000236:	697b      	ldr	r3, [r7, #20]
 8000238:	fa02 f303 	lsl.w	r3, r2, r3
 800023c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	693b      	ldr	r3, [r7, #16]
 8000244:	4013      	ands	r3, r2
 8000246:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000248:	68fa      	ldr	r2, [r7, #12]
 800024a:	693b      	ldr	r3, [r7, #16]
 800024c:	429a      	cmp	r2, r3
 800024e:	d165      	bne.n	800031c <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	681a      	ldr	r2, [r3, #0]
 8000254:	697b      	ldr	r3, [r7, #20]
 8000256:	005b      	lsls	r3, r3, #1
 8000258:	2103      	movs	r1, #3
 800025a:	fa01 f303 	lsl.w	r3, r1, r3
 800025e:	43db      	mvns	r3, r3
 8000260:	401a      	ands	r2, r3
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	681a      	ldr	r2, [r3, #0]
 800026a:	683b      	ldr	r3, [r7, #0]
 800026c:	791b      	ldrb	r3, [r3, #4]
 800026e:	4619      	mov	r1, r3
 8000270:	697b      	ldr	r3, [r7, #20]
 8000272:	005b      	lsls	r3, r3, #1
 8000274:	fa01 f303 	lsl.w	r3, r1, r3
 8000278:	431a      	orrs	r2, r3
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	791b      	ldrb	r3, [r3, #4]
 8000282:	2b01      	cmp	r3, #1
 8000284:	d003      	beq.n	800028e <GPIO_Init+0x76>
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	791b      	ldrb	r3, [r3, #4]
 800028a:	2b02      	cmp	r3, #2
 800028c:	d12e      	bne.n	80002ec <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	689a      	ldr	r2, [r3, #8]
 8000292:	697b      	ldr	r3, [r7, #20]
 8000294:	005b      	lsls	r3, r3, #1
 8000296:	2103      	movs	r1, #3
 8000298:	fa01 f303 	lsl.w	r3, r1, r3
 800029c:	43db      	mvns	r3, r3
 800029e:	401a      	ands	r2, r3
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	689a      	ldr	r2, [r3, #8]
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	795b      	ldrb	r3, [r3, #5]
 80002ac:	4619      	mov	r1, r3
 80002ae:	697b      	ldr	r3, [r7, #20]
 80002b0:	005b      	lsls	r3, r3, #1
 80002b2:	fa01 f303 	lsl.w	r3, r1, r3
 80002b6:	431a      	orrs	r2, r3
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	685a      	ldr	r2, [r3, #4]
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	b29b      	uxth	r3, r3
 80002c4:	4619      	mov	r1, r3
 80002c6:	2301      	movs	r3, #1
 80002c8:	408b      	lsls	r3, r1
 80002ca:	43db      	mvns	r3, r3
 80002cc:	401a      	ands	r2, r3
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	685b      	ldr	r3, [r3, #4]
 80002d6:	683a      	ldr	r2, [r7, #0]
 80002d8:	7992      	ldrb	r2, [r2, #6]
 80002da:	4611      	mov	r1, r2
 80002dc:	697a      	ldr	r2, [r7, #20]
 80002de:	b292      	uxth	r2, r2
 80002e0:	fa01 f202 	lsl.w	r2, r1, r2
 80002e4:	b292      	uxth	r2, r2
 80002e6:	431a      	orrs	r2, r3
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	68da      	ldr	r2, [r3, #12]
 80002f0:	697b      	ldr	r3, [r7, #20]
 80002f2:	b29b      	uxth	r3, r3
 80002f4:	005b      	lsls	r3, r3, #1
 80002f6:	2103      	movs	r1, #3
 80002f8:	fa01 f303 	lsl.w	r3, r1, r3
 80002fc:	43db      	mvns	r3, r3
 80002fe:	401a      	ands	r2, r3
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	68da      	ldr	r2, [r3, #12]
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	79db      	ldrb	r3, [r3, #7]
 800030c:	4619      	mov	r1, r3
 800030e:	697b      	ldr	r3, [r7, #20]
 8000310:	005b      	lsls	r3, r3, #1
 8000312:	fa01 f303 	lsl.w	r3, r1, r3
 8000316:	431a      	orrs	r2, r3
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800031c:	697b      	ldr	r3, [r7, #20]
 800031e:	3301      	adds	r3, #1
 8000320:	617b      	str	r3, [r7, #20]
 8000322:	697b      	ldr	r3, [r7, #20]
 8000324:	2b0f      	cmp	r3, #15
 8000326:	d985      	bls.n	8000234 <GPIO_Init+0x1c>
    }
  }
}
 8000328:	bf00      	nop
 800032a:	371c      	adds	r7, #28
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr

08000334 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	460b      	mov	r3, r1
 800033e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000340:	78fb      	ldrb	r3, [r7, #3]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d006      	beq.n	8000354 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000346:	490a      	ldr	r1, [pc, #40]	; (8000370 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000348:	4b09      	ldr	r3, [pc, #36]	; (8000370 <RCC_AHB1PeriphClockCmd+0x3c>)
 800034a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	4313      	orrs	r3, r2
 8000350:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000352:	e006      	b.n	8000362 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000354:	4906      	ldr	r1, [pc, #24]	; (8000370 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000356:	4b06      	ldr	r3, [pc, #24]	; (8000370 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	43db      	mvns	r3, r3
 800035e:	4013      	ands	r3, r2
 8000360:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000362:	bf00      	nop
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	40023800 	.word	0x40023800

08000374 <main>:
#include <stm32f4xx.h>

#define LED_PIN GPIO_Pin_14

GPIO_InitTypeDef  GPIO_InitStructure;
int main() {
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0

	SystemInit();
 8000378:	f000 f848 	bl	800040c <SystemInit>

	/* GPIOG Peripheral clock enable */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800037c:	2101      	movs	r1, #1
 800037e:	2002      	movs	r0, #2
 8000380:	f7ff ffd8 	bl	8000334 <RCC_AHB1PeriphClockCmd>

	/* Configure PG6 and PG8 in output pushpull mode */
	GPIO_InitStructure.GPIO_Pin = LED_PIN;
 8000384:	4b0a      	ldr	r3, [pc, #40]	; (80003b0 <main+0x3c>)
 8000386:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800038a:	601a      	str	r2, [r3, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800038c:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <main+0x3c>)
 800038e:	2201      	movs	r2, #1
 8000390:	711a      	strb	r2, [r3, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000392:	4b07      	ldr	r3, [pc, #28]	; (80003b0 <main+0x3c>)
 8000394:	2200      	movs	r2, #0
 8000396:	719a      	strb	r2, [r3, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <main+0x3c>)
 800039a:	2200      	movs	r2, #0
 800039c:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800039e:	4904      	ldr	r1, [pc, #16]	; (80003b0 <main+0x3c>)
 80003a0:	4804      	ldr	r0, [pc, #16]	; (80003b4 <main+0x40>)
 80003a2:	f7ff ff39 	bl	8000218 <GPIO_Init>
	 cycles to minimize more the infinite loop timing.
	 This code needs to be compiled with high speed optimization option.  */
	while (1)
	{
	/* Set PG6 and PG8 */
	GPIOB->BSRRL = LED_PIN;
 80003a6:	4b03      	ldr	r3, [pc, #12]	; (80003b4 <main+0x40>)
 80003a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003ac:	831a      	strh	r2, [r3, #24]
 80003ae:	e7fa      	b.n	80003a6 <main+0x32>
 80003b0:	2000001c 	.word	0x2000001c
 80003b4:	40020400 	.word	0x40020400

080003b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80003b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80003bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80003be:	e003      	b.n	80003c8 <LoopCopyDataInit>

080003c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80003c0:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80003c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80003c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80003c6:	3104      	adds	r1, #4

080003c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003c8:	480b      	ldr	r0, [pc, #44]	; (80003f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003ca:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003d0:	d3f6      	bcc.n	80003c0 <CopyDataInit>
  ldr  r2, =_sbss
 80003d2:	4a0b      	ldr	r2, [pc, #44]	; (8000400 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003d4:	e002      	b.n	80003dc <LoopFillZerobss>

080003d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80003d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003d8:	f842 3b04 	str.w	r3, [r2], #4

080003dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003dc:	4b09      	ldr	r3, [pc, #36]	; (8000404 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80003de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003e0:	d3f9      	bcc.n	80003d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003e2:	f000 f813 	bl	800040c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003e6:	f000 f847 	bl	8000478 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003ea:	f7ff ffc3 	bl	8000374 <main>
  bx  lr    
 80003ee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80003f0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80003f4:	080004e0 	.word	0x080004e0
  ldr  r0, =_sdata
 80003f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80003fc:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8000400:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8000404:	20000024 	.word	0x20000024

08000408 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000408:	e7fe      	b.n	8000408 <ADC_IRQHandler>
	...

0800040c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000410:	4a16      	ldr	r2, [pc, #88]	; (800046c <SystemInit+0x60>)
 8000412:	4b16      	ldr	r3, [pc, #88]	; (800046c <SystemInit+0x60>)
 8000414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000418:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800041c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000420:	4a13      	ldr	r2, [pc, #76]	; (8000470 <SystemInit+0x64>)
 8000422:	4b13      	ldr	r3, [pc, #76]	; (8000470 <SystemInit+0x64>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	f043 0301 	orr.w	r3, r3, #1
 800042a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800042c:	4b10      	ldr	r3, [pc, #64]	; (8000470 <SystemInit+0x64>)
 800042e:	2200      	movs	r2, #0
 8000430:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000432:	4a0f      	ldr	r2, [pc, #60]	; (8000470 <SystemInit+0x64>)
 8000434:	4b0e      	ldr	r3, [pc, #56]	; (8000470 <SystemInit+0x64>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800043c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000440:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000442:	4b0b      	ldr	r3, [pc, #44]	; (8000470 <SystemInit+0x64>)
 8000444:	4a0b      	ldr	r2, [pc, #44]	; (8000474 <SystemInit+0x68>)
 8000446:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000448:	4a09      	ldr	r2, [pc, #36]	; (8000470 <SystemInit+0x64>)
 800044a:	4b09      	ldr	r3, [pc, #36]	; (8000470 <SystemInit+0x64>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000452:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000454:	4b06      	ldr	r3, [pc, #24]	; (8000470 <SystemInit+0x64>)
 8000456:	2200      	movs	r2, #0
 8000458:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800045a:	4b04      	ldr	r3, [pc, #16]	; (800046c <SystemInit+0x60>)
 800045c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000460:	609a      	str	r2, [r3, #8]
#endif
}
 8000462:	bf00      	nop
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr
 800046c:	e000ed00 	.word	0xe000ed00
 8000470:	40023800 	.word	0x40023800
 8000474:	24003010 	.word	0x24003010

08000478 <__libc_init_array>:
 8000478:	b570      	push	{r4, r5, r6, lr}
 800047a:	4e0d      	ldr	r6, [pc, #52]	; (80004b0 <__libc_init_array+0x38>)
 800047c:	4c0d      	ldr	r4, [pc, #52]	; (80004b4 <__libc_init_array+0x3c>)
 800047e:	1ba4      	subs	r4, r4, r6
 8000480:	10a4      	asrs	r4, r4, #2
 8000482:	2500      	movs	r5, #0
 8000484:	42a5      	cmp	r5, r4
 8000486:	d109      	bne.n	800049c <__libc_init_array+0x24>
 8000488:	4e0b      	ldr	r6, [pc, #44]	; (80004b8 <__libc_init_array+0x40>)
 800048a:	4c0c      	ldr	r4, [pc, #48]	; (80004bc <__libc_init_array+0x44>)
 800048c:	f000 f818 	bl	80004c0 <_init>
 8000490:	1ba4      	subs	r4, r4, r6
 8000492:	10a4      	asrs	r4, r4, #2
 8000494:	2500      	movs	r5, #0
 8000496:	42a5      	cmp	r5, r4
 8000498:	d105      	bne.n	80004a6 <__libc_init_array+0x2e>
 800049a:	bd70      	pop	{r4, r5, r6, pc}
 800049c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004a0:	4798      	blx	r3
 80004a2:	3501      	adds	r5, #1
 80004a4:	e7ee      	b.n	8000484 <__libc_init_array+0xc>
 80004a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004aa:	4798      	blx	r3
 80004ac:	3501      	adds	r5, #1
 80004ae:	e7f2      	b.n	8000496 <__libc_init_array+0x1e>
 80004b0:	080004d8 	.word	0x080004d8
 80004b4:	080004d8 	.word	0x080004d8
 80004b8:	080004d8 	.word	0x080004d8
 80004bc:	080004dc 	.word	0x080004dc

080004c0 <_init>:
 80004c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004c2:	bf00      	nop
 80004c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004c6:	bc08      	pop	{r3}
 80004c8:	469e      	mov	lr, r3
 80004ca:	4770      	bx	lr

080004cc <_fini>:
 80004cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ce:	bf00      	nop
 80004d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004d2:	bc08      	pop	{r3}
 80004d4:	469e      	mov	lr, r3
 80004d6:	4770      	bx	lr
