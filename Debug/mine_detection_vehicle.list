
mine_detection_vehicle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001144  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800131c  0800131c  0001131c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001384  08001384  00011384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001388  08001388  00011388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  0800138c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000179c  20000010  0800139c  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  200017ac  0800139c  000217ac  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00006071  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001004  00000000  00000000  000260b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000590  00000000  00000000  000270b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000508  00000000  00000000  00027648  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001ea5  00000000  00000000  00027b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002102  00000000  00000000  000299f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002baf7  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000017b8  00000000  00000000  0002bb74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08001304 	.word	0x08001304

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08001304 	.word	0x08001304

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000228:	b480      	push	{r7}
 800022a:	b087      	sub	sp, #28
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
 8000230:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000232:	2300      	movs	r3, #0
 8000234:	617b      	str	r3, [r7, #20]
 8000236:	2300      	movs	r3, #0
 8000238:	613b      	str	r3, [r7, #16]
 800023a:	2300      	movs	r3, #0
 800023c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800023e:	2300      	movs	r3, #0
 8000240:	617b      	str	r3, [r7, #20]
 8000242:	e076      	b.n	8000332 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000244:	2201      	movs	r2, #1
 8000246:	697b      	ldr	r3, [r7, #20]
 8000248:	fa02 f303 	lsl.w	r3, r2, r3
 800024c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	681a      	ldr	r2, [r3, #0]
 8000252:	693b      	ldr	r3, [r7, #16]
 8000254:	4013      	ands	r3, r2
 8000256:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000258:	68fa      	ldr	r2, [r7, #12]
 800025a:	693b      	ldr	r3, [r7, #16]
 800025c:	429a      	cmp	r2, r3
 800025e:	d165      	bne.n	800032c <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	681a      	ldr	r2, [r3, #0]
 8000264:	697b      	ldr	r3, [r7, #20]
 8000266:	005b      	lsls	r3, r3, #1
 8000268:	2103      	movs	r1, #3
 800026a:	fa01 f303 	lsl.w	r3, r1, r3
 800026e:	43db      	mvns	r3, r3
 8000270:	401a      	ands	r2, r3
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	681a      	ldr	r2, [r3, #0]
 800027a:	683b      	ldr	r3, [r7, #0]
 800027c:	791b      	ldrb	r3, [r3, #4]
 800027e:	4619      	mov	r1, r3
 8000280:	697b      	ldr	r3, [r7, #20]
 8000282:	005b      	lsls	r3, r3, #1
 8000284:	fa01 f303 	lsl.w	r3, r1, r3
 8000288:	431a      	orrs	r2, r3
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	791b      	ldrb	r3, [r3, #4]
 8000292:	2b01      	cmp	r3, #1
 8000294:	d003      	beq.n	800029e <GPIO_Init+0x76>
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	791b      	ldrb	r3, [r3, #4]
 800029a:	2b02      	cmp	r3, #2
 800029c:	d12e      	bne.n	80002fc <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	689a      	ldr	r2, [r3, #8]
 80002a2:	697b      	ldr	r3, [r7, #20]
 80002a4:	005b      	lsls	r3, r3, #1
 80002a6:	2103      	movs	r1, #3
 80002a8:	fa01 f303 	lsl.w	r3, r1, r3
 80002ac:	43db      	mvns	r3, r3
 80002ae:	401a      	ands	r2, r3
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	689a      	ldr	r2, [r3, #8]
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	795b      	ldrb	r3, [r3, #5]
 80002bc:	4619      	mov	r1, r3
 80002be:	697b      	ldr	r3, [r7, #20]
 80002c0:	005b      	lsls	r3, r3, #1
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	431a      	orrs	r2, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	685a      	ldr	r2, [r3, #4]
 80002d0:	697b      	ldr	r3, [r7, #20]
 80002d2:	b29b      	uxth	r3, r3
 80002d4:	4619      	mov	r1, r3
 80002d6:	2301      	movs	r3, #1
 80002d8:	408b      	lsls	r3, r1
 80002da:	43db      	mvns	r3, r3
 80002dc:	401a      	ands	r2, r3
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	685b      	ldr	r3, [r3, #4]
 80002e6:	683a      	ldr	r2, [r7, #0]
 80002e8:	7992      	ldrb	r2, [r2, #6]
 80002ea:	4611      	mov	r1, r2
 80002ec:	697a      	ldr	r2, [r7, #20]
 80002ee:	b292      	uxth	r2, r2
 80002f0:	fa01 f202 	lsl.w	r2, r1, r2
 80002f4:	b292      	uxth	r2, r2
 80002f6:	431a      	orrs	r2, r3
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	68da      	ldr	r2, [r3, #12]
 8000300:	697b      	ldr	r3, [r7, #20]
 8000302:	b29b      	uxth	r3, r3
 8000304:	005b      	lsls	r3, r3, #1
 8000306:	2103      	movs	r1, #3
 8000308:	fa01 f303 	lsl.w	r3, r1, r3
 800030c:	43db      	mvns	r3, r3
 800030e:	401a      	ands	r2, r3
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	68da      	ldr	r2, [r3, #12]
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	79db      	ldrb	r3, [r3, #7]
 800031c:	4619      	mov	r1, r3
 800031e:	697b      	ldr	r3, [r7, #20]
 8000320:	005b      	lsls	r3, r3, #1
 8000322:	fa01 f303 	lsl.w	r3, r1, r3
 8000326:	431a      	orrs	r2, r3
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800032c:	697b      	ldr	r3, [r7, #20]
 800032e:	3301      	adds	r3, #1
 8000330:	617b      	str	r3, [r7, #20]
 8000332:	697b      	ldr	r3, [r7, #20]
 8000334:	2b0f      	cmp	r3, #15
 8000336:	d985      	bls.n	8000244 <GPIO_Init+0x1c>
    }
  }
}
 8000338:	bf00      	nop
 800033a:	371c      	adds	r7, #28
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr

08000344 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000344:	b480      	push	{r7}
 8000346:	b085      	sub	sp, #20
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
 800034c:	460b      	mov	r3, r1
 800034e:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000350:	2300      	movs	r3, #0
 8000352:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	691a      	ldr	r2, [r3, #16]
 8000358:	887b      	ldrh	r3, [r7, #2]
 800035a:	4013      	ands	r3, r2
 800035c:	2b00      	cmp	r3, #0
 800035e:	d002      	beq.n	8000366 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000360:	2301      	movs	r3, #1
 8000362:	73fb      	strb	r3, [r7, #15]
 8000364:	e001      	b.n	800036a <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000366:	2300      	movs	r3, #0
 8000368:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800036a:	7bfb      	ldrb	r3, [r7, #15]
}
 800036c:	4618      	mov	r0, r3
 800036e:	3714      	adds	r7, #20
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr

08000378 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000378:	b480      	push	{r7}
 800037a:	b085      	sub	sp, #20
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	460b      	mov	r3, r1
 8000382:	807b      	strh	r3, [r7, #2]
 8000384:	4613      	mov	r3, r2
 8000386:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000388:	2300      	movs	r3, #0
 800038a:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800038c:	2300      	movs	r3, #0
 800038e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000390:	787a      	ldrb	r2, [r7, #1]
 8000392:	887b      	ldrh	r3, [r7, #2]
 8000394:	f003 0307 	and.w	r3, r3, #7
 8000398:	009b      	lsls	r3, r3, #2
 800039a:	fa02 f303 	lsl.w	r3, r2, r3
 800039e:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80003a0:	887b      	ldrh	r3, [r7, #2]
 80003a2:	08db      	lsrs	r3, r3, #3
 80003a4:	b29b      	uxth	r3, r3
 80003a6:	4618      	mov	r0, r3
 80003a8:	887b      	ldrh	r3, [r7, #2]
 80003aa:	08db      	lsrs	r3, r3, #3
 80003ac:	b29b      	uxth	r3, r3
 80003ae:	461a      	mov	r2, r3
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	3208      	adds	r2, #8
 80003b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003b8:	887b      	ldrh	r3, [r7, #2]
 80003ba:	f003 0307 	and.w	r3, r3, #7
 80003be:	009b      	lsls	r3, r3, #2
 80003c0:	210f      	movs	r1, #15
 80003c2:	fa01 f303 	lsl.w	r3, r1, r3
 80003c6:	43db      	mvns	r3, r3
 80003c8:	ea02 0103 	and.w	r1, r2, r3
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	f100 0208 	add.w	r2, r0, #8
 80003d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80003d6:	887b      	ldrh	r3, [r7, #2]
 80003d8:	08db      	lsrs	r3, r3, #3
 80003da:	b29b      	uxth	r3, r3
 80003dc:	461a      	mov	r2, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	3208      	adds	r2, #8
 80003e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	4313      	orrs	r3, r2
 80003ea:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80003ec:	887b      	ldrh	r3, [r7, #2]
 80003ee:	08db      	lsrs	r3, r3, #3
 80003f0:	b29b      	uxth	r3, r3
 80003f2:	461a      	mov	r2, r3
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	3208      	adds	r2, #8
 80003f8:	68b9      	ldr	r1, [r7, #8]
 80003fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80003fe:	bf00      	nop
 8000400:	3714      	adds	r7, #20
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
	...

0800040c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800040c:	b480      	push	{r7}
 800040e:	b08b      	sub	sp, #44	; 0x2c
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000414:	2300      	movs	r3, #0
 8000416:	623b      	str	r3, [r7, #32]
 8000418:	2300      	movs	r3, #0
 800041a:	61fb      	str	r3, [r7, #28]
 800041c:	2300      	movs	r3, #0
 800041e:	627b      	str	r3, [r7, #36]	; 0x24
 8000420:	2302      	movs	r3, #2
 8000422:	61bb      	str	r3, [r7, #24]
 8000424:	2300      	movs	r3, #0
 8000426:	617b      	str	r3, [r7, #20]
 8000428:	2302      	movs	r3, #2
 800042a:	613b      	str	r3, [r7, #16]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
 800042c:	2302      	movs	r3, #2
 800042e:	60fb      	str	r3, [r7, #12]
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000430:	4b6f      	ldr	r3, [pc, #444]	; (80005f0 <RCC_GetClocksFreq+0x1e4>)
 8000432:	689b      	ldr	r3, [r3, #8]
 8000434:	f003 030c 	and.w	r3, r3, #12
 8000438:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 800043a:	6a3b      	ldr	r3, [r7, #32]
 800043c:	2b0c      	cmp	r3, #12
 800043e:	f200 8091 	bhi.w	8000564 <RCC_GetClocksFreq+0x158>
 8000442:	a201      	add	r2, pc, #4	; (adr r2, 8000448 <RCC_GetClocksFreq+0x3c>)
 8000444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000448:	0800047d 	.word	0x0800047d
 800044c:	08000565 	.word	0x08000565
 8000450:	08000565 	.word	0x08000565
 8000454:	08000565 	.word	0x08000565
 8000458:	08000485 	.word	0x08000485
 800045c:	08000565 	.word	0x08000565
 8000460:	08000565 	.word	0x08000565
 8000464:	08000565 	.word	0x08000565
 8000468:	0800048d 	.word	0x0800048d
 800046c:	08000565 	.word	0x08000565
 8000470:	08000565 	.word	0x08000565
 8000474:	08000565 	.word	0x08000565
 8000478:	080004f9 	.word	0x080004f9
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	4a5d      	ldr	r2, [pc, #372]	; (80005f4 <RCC_GetClocksFreq+0x1e8>)
 8000480:	601a      	str	r2, [r3, #0]
    break;
 8000482:	e073      	b.n	800056c <RCC_GetClocksFreq+0x160>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4a5c      	ldr	r2, [pc, #368]	; (80005f8 <RCC_GetClocksFreq+0x1ec>)
 8000488:	601a      	str	r2, [r3, #0]
    break;
 800048a:	e06f      	b.n	800056c <RCC_GetClocksFreq+0x160>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800048c:	4b58      	ldr	r3, [pc, #352]	; (80005f0 <RCC_GetClocksFreq+0x1e4>)
 800048e:	685b      	ldr	r3, [r3, #4]
 8000490:	0d9b      	lsrs	r3, r3, #22
 8000492:	f003 0301 	and.w	r3, r3, #1
 8000496:	617b      	str	r3, [r7, #20]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000498:	4b55      	ldr	r3, [pc, #340]	; (80005f0 <RCC_GetClocksFreq+0x1e4>)
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80004a0:	613b      	str	r3, [r7, #16]
    
    if (pllsource != 0)
 80004a2:	697b      	ldr	r3, [r7, #20]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d00c      	beq.n	80004c2 <RCC_GetClocksFreq+0xb6>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80004a8:	4a53      	ldr	r2, [pc, #332]	; (80005f8 <RCC_GetClocksFreq+0x1ec>)
 80004aa:	693b      	ldr	r3, [r7, #16]
 80004ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80004b0:	4a4f      	ldr	r2, [pc, #316]	; (80005f0 <RCC_GetClocksFreq+0x1e4>)
 80004b2:	6852      	ldr	r2, [r2, #4]
 80004b4:	0992      	lsrs	r2, r2, #6
 80004b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80004ba:	fb02 f303 	mul.w	r3, r2, r3
 80004be:	627b      	str	r3, [r7, #36]	; 0x24
 80004c0:	e00b      	b.n	80004da <RCC_GetClocksFreq+0xce>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80004c2:	4a4c      	ldr	r2, [pc, #304]	; (80005f4 <RCC_GetClocksFreq+0x1e8>)
 80004c4:	693b      	ldr	r3, [r7, #16]
 80004c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80004ca:	4a49      	ldr	r2, [pc, #292]	; (80005f0 <RCC_GetClocksFreq+0x1e4>)
 80004cc:	6852      	ldr	r2, [r2, #4]
 80004ce:	0992      	lsrs	r2, r2, #6
 80004d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80004d4:	fb02 f303 	mul.w	r3, r2, r3
 80004d8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80004da:	4b45      	ldr	r3, [pc, #276]	; (80005f0 <RCC_GetClocksFreq+0x1e4>)
 80004dc:	685b      	ldr	r3, [r3, #4]
 80004de:	0c1b      	lsrs	r3, r3, #16
 80004e0:	f003 0303 	and.w	r3, r3, #3
 80004e4:	3301      	adds	r3, #1
 80004e6:	005b      	lsls	r3, r3, #1
 80004e8:	61bb      	str	r3, [r7, #24]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80004ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80004ec:	69bb      	ldr	r3, [r7, #24]
 80004ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	601a      	str	r2, [r3, #0]
    break;
 80004f6:	e039      	b.n	800056c <RCC_GetClocksFreq+0x160>
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
  case 0x0C:  /* PLL R used as system clock  source */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80004f8:	4b3d      	ldr	r3, [pc, #244]	; (80005f0 <RCC_GetClocksFreq+0x1e4>)
 80004fa:	685b      	ldr	r3, [r3, #4]
 80004fc:	0d9b      	lsrs	r3, r3, #22
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	617b      	str	r3, [r7, #20]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000504:	4b3a      	ldr	r3, [pc, #232]	; (80005f0 <RCC_GetClocksFreq+0x1e4>)
 8000506:	685b      	ldr	r3, [r3, #4]
 8000508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800050c:	613b      	str	r3, [r7, #16]
    
    if (pllsource != 0)
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d00c      	beq.n	800052e <RCC_GetClocksFreq+0x122>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000514:	4a38      	ldr	r2, [pc, #224]	; (80005f8 <RCC_GetClocksFreq+0x1ec>)
 8000516:	693b      	ldr	r3, [r7, #16]
 8000518:	fbb2 f3f3 	udiv	r3, r2, r3
 800051c:	4a34      	ldr	r2, [pc, #208]	; (80005f0 <RCC_GetClocksFreq+0x1e4>)
 800051e:	6852      	ldr	r2, [r2, #4]
 8000520:	0992      	lsrs	r2, r2, #6
 8000522:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000526:	fb02 f303 	mul.w	r3, r2, r3
 800052a:	627b      	str	r3, [r7, #36]	; 0x24
 800052c:	e00b      	b.n	8000546 <RCC_GetClocksFreq+0x13a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800052e:	4a31      	ldr	r2, [pc, #196]	; (80005f4 <RCC_GetClocksFreq+0x1e8>)
 8000530:	693b      	ldr	r3, [r7, #16]
 8000532:	fbb2 f3f3 	udiv	r3, r2, r3
 8000536:	4a2e      	ldr	r2, [pc, #184]	; (80005f0 <RCC_GetClocksFreq+0x1e4>)
 8000538:	6852      	ldr	r2, [r2, #4]
 800053a:	0992      	lsrs	r2, r2, #6
 800053c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000540:	fb02 f303 	mul.w	r3, r2, r3
 8000544:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
 8000546:	4b2a      	ldr	r3, [pc, #168]	; (80005f0 <RCC_GetClocksFreq+0x1e4>)
 8000548:	685b      	ldr	r3, [r3, #4]
 800054a:	0f1b      	lsrs	r3, r3, #28
 800054c:	f003 0307 	and.w	r3, r3, #7
 8000550:	3301      	adds	r3, #1
 8000552:	005b      	lsls	r3, r3, #1
 8000554:	60fb      	str	r3, [r7, #12]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
 8000556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	fbb2 f2f3 	udiv	r2, r2, r3
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	601a      	str	r2, [r3, #0]
    break;
 8000562:	e003      	b.n	800056c <RCC_GetClocksFreq+0x160>
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	4a23      	ldr	r2, [pc, #140]	; (80005f4 <RCC_GetClocksFreq+0x1e8>)
 8000568:	601a      	str	r2, [r3, #0]
    break;
 800056a:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800056c:	4b20      	ldr	r3, [pc, #128]	; (80005f0 <RCC_GetClocksFreq+0x1e4>)
 800056e:	689b      	ldr	r3, [r3, #8]
 8000570:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000574:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000576:	6a3b      	ldr	r3, [r7, #32]
 8000578:	091b      	lsrs	r3, r3, #4
 800057a:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 800057c:	4a1f      	ldr	r2, [pc, #124]	; (80005fc <RCC_GetClocksFreq+0x1f0>)
 800057e:	6a3b      	ldr	r3, [r7, #32]
 8000580:	4413      	add	r3, r2
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	b2db      	uxtb	r3, r3
 8000586:	61fb      	str	r3, [r7, #28]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	69fb      	ldr	r3, [r7, #28]
 800058e:	40da      	lsrs	r2, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000594:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <RCC_GetClocksFreq+0x1e4>)
 8000596:	689b      	ldr	r3, [r3, #8]
 8000598:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800059c:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 10;
 800059e:	6a3b      	ldr	r3, [r7, #32]
 80005a0:	0a9b      	lsrs	r3, r3, #10
 80005a2:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80005a4:	4a15      	ldr	r2, [pc, #84]	; (80005fc <RCC_GetClocksFreq+0x1f0>)
 80005a6:	6a3b      	ldr	r3, [r7, #32]
 80005a8:	4413      	add	r3, r2
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	61fb      	str	r3, [r7, #28]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	685a      	ldr	r2, [r3, #4]
 80005b4:	69fb      	ldr	r3, [r7, #28]
 80005b6:	40da      	lsrs	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <RCC_GetClocksFreq+0x1e4>)
 80005be:	689b      	ldr	r3, [r3, #8]
 80005c0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80005c4:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 13;
 80005c6:	6a3b      	ldr	r3, [r7, #32]
 80005c8:	0b5b      	lsrs	r3, r3, #13
 80005ca:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80005cc:	4a0b      	ldr	r2, [pc, #44]	; (80005fc <RCC_GetClocksFreq+0x1f0>)
 80005ce:	6a3b      	ldr	r3, [r7, #32]
 80005d0:	4413      	add	r3, r2
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	61fb      	str	r3, [r7, #28]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	685a      	ldr	r2, [r3, #4]
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	40da      	lsrs	r2, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	60da      	str	r2, [r3, #12]
}
 80005e4:	bf00      	nop
 80005e6:	372c      	adds	r7, #44	; 0x2c
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	40023800 	.word	0x40023800
 80005f4:	00f42400 	.word	0x00f42400
 80005f8:	007a1200 	.word	0x007a1200
 80005fc:	20000000 	.word	0x20000000

08000600 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	460b      	mov	r3, r1
 800060a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800060c:	78fb      	ldrb	r3, [r7, #3]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d006      	beq.n	8000620 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000612:	490a      	ldr	r1, [pc, #40]	; (800063c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4313      	orrs	r3, r2
 800061c:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800061e:	e006      	b.n	800062e <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000620:	4906      	ldr	r1, [pc, #24]	; (800063c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	43db      	mvns	r3, r3
 800062a:	4013      	ands	r3, r2
 800062c:	630b      	str	r3, [r1, #48]	; 0x30
}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800

08000640 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	460b      	mov	r3, r1
 800064a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800064c:	78fb      	ldrb	r3, [r7, #3]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d006      	beq.n	8000660 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000652:	490a      	ldr	r1, [pc, #40]	; (800067c <RCC_APB1PeriphClockCmd+0x3c>)
 8000654:	4b09      	ldr	r3, [pc, #36]	; (800067c <RCC_APB1PeriphClockCmd+0x3c>)
 8000656:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4313      	orrs	r3, r2
 800065c:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800065e:	e006      	b.n	800066e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000660:	4906      	ldr	r1, [pc, #24]	; (800067c <RCC_APB1PeriphClockCmd+0x3c>)
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <RCC_APB1PeriphClockCmd+0x3c>)
 8000664:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	43db      	mvns	r3, r3
 800066a:	4013      	ands	r3, r2
 800066c:	640b      	str	r3, [r1, #64]	; 0x40
}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	40023800 	.word	0x40023800

08000680 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	460b      	mov	r3, r1
 800068a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800068c:	78fb      	ldrb	r3, [r7, #3]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d006      	beq.n	80006a0 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000692:	490a      	ldr	r1, [pc, #40]	; (80006bc <RCC_APB2PeriphClockCmd+0x3c>)
 8000694:	4b09      	ldr	r3, [pc, #36]	; (80006bc <RCC_APB2PeriphClockCmd+0x3c>)
 8000696:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	4313      	orrs	r3, r2
 800069c:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800069e:	e006      	b.n	80006ae <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80006a0:	4906      	ldr	r1, [pc, #24]	; (80006bc <RCC_APB2PeriphClockCmd+0x3c>)
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <RCC_APB2PeriphClockCmd+0x3c>)
 80006a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	43db      	mvns	r3, r3
 80006aa:	4013      	ands	r3, r2
 80006ac:	644b      	str	r3, [r1, #68]	; 0x44
}
 80006ae:	bf00      	nop
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800

080006c0 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	; 0x28
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80006ca:	2300      	movs	r3, #0
 80006cc:	627b      	str	r3, [r7, #36]	; 0x24
 80006ce:	2300      	movs	r3, #0
 80006d0:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	8a1b      	ldrh	r3, [r3, #16]
 80006de:	b29b      	uxth	r3, r3
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80006e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	88db      	ldrh	r3, [r3, #6]
 80006ee:	461a      	mov	r2, r3
 80006f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f2:	4313      	orrs	r3, r2
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80006f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	899b      	ldrh	r3, [r3, #12]
 8000702:	b29b      	uxth	r3, r3
 8000704:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000708:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800070c:	f023 030c 	bic.w	r3, r3, #12
 8000710:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	889a      	ldrh	r2, [r3, #4]
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	891b      	ldrh	r3, [r3, #8]
 800071a:	4313      	orrs	r3, r2
 800071c:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000722:	4313      	orrs	r3, r2
 8000724:	b29b      	uxth	r3, r3
 8000726:	461a      	mov	r2, r3
 8000728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072a:	4313      	orrs	r3, r2
 800072c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800072e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000730:	b29a      	uxth	r2, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	8a9b      	ldrh	r3, [r3, #20]
 800073a:	b29b      	uxth	r3, r3
 800073c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800073e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000744:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	899b      	ldrh	r3, [r3, #12]
 800074a:	461a      	mov	r2, r3
 800074c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074e:	4313      	orrs	r3, r2
 8000750:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000754:	b29a      	uxth	r2, r3
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800075a:	f107 0308 	add.w	r3, r7, #8
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff fe54 	bl	800040c <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4a30      	ldr	r2, [pc, #192]	; (8000828 <USART_Init+0x168>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d003      	beq.n	8000774 <USART_Init+0xb4>
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4a2f      	ldr	r2, [pc, #188]	; (800082c <USART_Init+0x16c>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d102      	bne.n	800077a <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	623b      	str	r3, [r7, #32]
 8000778:	e001      	b.n	800077e <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800077a:	693b      	ldr	r3, [r7, #16]
 800077c:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	899b      	ldrh	r3, [r3, #12]
 8000782:	b29b      	uxth	r3, r3
 8000784:	b21b      	sxth	r3, r3
 8000786:	2b00      	cmp	r3, #0
 8000788:	da0c      	bge.n	80007a4 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800078a:	6a3a      	ldr	r2, [r7, #32]
 800078c:	4613      	mov	r3, r2
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	4413      	add	r3, r2
 8000792:	009a      	lsls	r2, r3, #2
 8000794:	441a      	add	r2, r3
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	005b      	lsls	r3, r3, #1
 800079c:	fbb2 f3f3 	udiv	r3, r2, r3
 80007a0:	61fb      	str	r3, [r7, #28]
 80007a2:	e00b      	b.n	80007bc <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80007a4:	6a3a      	ldr	r2, [r7, #32]
 80007a6:	4613      	mov	r3, r2
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	4413      	add	r3, r2
 80007ac:	009a      	lsls	r2, r3, #2
 80007ae:	441a      	add	r2, r3
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ba:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80007bc:	69fb      	ldr	r3, [r7, #28]
 80007be:	4a1c      	ldr	r2, [pc, #112]	; (8000830 <USART_Init+0x170>)
 80007c0:	fba2 2303 	umull	r2, r3, r2, r3
 80007c4:	095b      	lsrs	r3, r3, #5
 80007c6:	011b      	lsls	r3, r3, #4
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80007ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007cc:	091b      	lsrs	r3, r3, #4
 80007ce:	2264      	movs	r2, #100	; 0x64
 80007d0:	fb02 f303 	mul.w	r3, r2, r3
 80007d4:	69fa      	ldr	r2, [r7, #28]
 80007d6:	1ad3      	subs	r3, r2, r3
 80007d8:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	899b      	ldrh	r3, [r3, #12]
 80007de:	b29b      	uxth	r3, r3
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	da0c      	bge.n	8000800 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80007e6:	69bb      	ldr	r3, [r7, #24]
 80007e8:	00db      	lsls	r3, r3, #3
 80007ea:	3332      	adds	r3, #50	; 0x32
 80007ec:	4a10      	ldr	r2, [pc, #64]	; (8000830 <USART_Init+0x170>)
 80007ee:	fba2 2303 	umull	r2, r3, r2, r3
 80007f2:	095b      	lsrs	r3, r3, #5
 80007f4:	f003 0307 	and.w	r3, r3, #7
 80007f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007fa:	4313      	orrs	r3, r2
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
 80007fe:	e00b      	b.n	8000818 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000800:	69bb      	ldr	r3, [r7, #24]
 8000802:	011b      	lsls	r3, r3, #4
 8000804:	3332      	adds	r3, #50	; 0x32
 8000806:	4a0a      	ldr	r2, [pc, #40]	; (8000830 <USART_Init+0x170>)
 8000808:	fba2 2303 	umull	r2, r3, r2, r3
 800080c:	095b      	lsrs	r3, r3, #5
 800080e:	f003 030f 	and.w	r3, r3, #15
 8000812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000814:	4313      	orrs	r3, r2
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081a:	b29a      	uxth	r2, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	811a      	strh	r2, [r3, #8]
}
 8000820:	bf00      	nop
 8000822:	3728      	adds	r7, #40	; 0x28
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40011000 	.word	0x40011000
 800082c:	40011400 	.word	0x40011400
 8000830:	51eb851f 	.word	0x51eb851f

08000834 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	460b      	mov	r3, r1
 800083e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000840:	78fb      	ldrb	r3, [r7, #3]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d008      	beq.n	8000858 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	899b      	ldrh	r3, [r3, #12]
 800084a:	b29b      	uxth	r3, r3
 800084c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000850:	b29a      	uxth	r2, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000856:	e007      	b.n	8000868 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	899b      	ldrh	r3, [r3, #12]
 800085c:	b29b      	uxth	r3, r3
 800085e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000862:	b29a      	uxth	r2, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	819a      	strh	r2, [r3, #12]
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	889b      	ldrh	r3, [r3, #4]
 8000880:	b29b      	uxth	r3, r3
 8000882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000886:	b29b      	uxth	r3, r3
}
 8000888:	4618      	mov	r0, r3
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000894:	b480      	push	{r7}
 8000896:	b087      	sub	sp, #28
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	460b      	mov	r3, r1
 800089e:	807b      	strh	r3, [r7, #2]
 80008a0:	4613      	mov	r3, r2
 80008a2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 80008a4:	2300      	movs	r3, #0
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	2300      	movs	r3, #0
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	2300      	movs	r3, #0
 80008ae:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80008b8:	887b      	ldrh	r3, [r7, #2]
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	095b      	lsrs	r3, r3, #5
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80008c2:	887b      	ldrh	r3, [r7, #2]
 80008c4:	f003 031f 	and.w	r3, r3, #31
 80008c8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 80008ca:	2201      	movs	r2, #1
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80008d4:	693b      	ldr	r3, [r7, #16]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d103      	bne.n	80008e2 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	330c      	adds	r3, #12
 80008de:	617b      	str	r3, [r7, #20]
 80008e0:	e009      	b.n	80008f6 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80008e2:	693b      	ldr	r3, [r7, #16]
 80008e4:	2b02      	cmp	r3, #2
 80008e6:	d103      	bne.n	80008f0 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	3310      	adds	r3, #16
 80008ec:	617b      	str	r3, [r7, #20]
 80008ee:	e002      	b.n	80008f6 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	3314      	adds	r3, #20
 80008f4:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 80008f6:	787b      	ldrb	r3, [r7, #1]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d006      	beq.n	800090a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	697a      	ldr	r2, [r7, #20]
 8000900:	6811      	ldr	r1, [r2, #0]
 8000902:	68ba      	ldr	r2, [r7, #8]
 8000904:	430a      	orrs	r2, r1
 8000906:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000908:	e006      	b.n	8000918 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	697a      	ldr	r2, [r7, #20]
 800090e:	6811      	ldr	r1, [r2, #0]
 8000910:	68ba      	ldr	r2, [r7, #8]
 8000912:	43d2      	mvns	r2, r2
 8000914:	400a      	ands	r2, r1
 8000916:	601a      	str	r2, [r3, #0]
}
 8000918:	bf00      	nop
 800091a:	371c      	adds	r7, #28
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000924:	b480      	push	{r7}
 8000926:	b087      	sub	sp, #28
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	460b      	mov	r3, r1
 800092e:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000930:	2300      	movs	r3, #0
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
 8000938:	2300      	movs	r3, #0
 800093a:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 800093c:	2300      	movs	r3, #0
 800093e:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000940:	887b      	ldrh	r3, [r7, #2]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	095b      	lsrs	r3, r3, #5
 8000946:	b2db      	uxtb	r3, r3
 8000948:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800094a:	887b      	ldrh	r3, [r7, #2]
 800094c:	f003 031f 	and.w	r3, r3, #31
 8000950:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000952:	2201      	movs	r2, #1
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	2b01      	cmp	r3, #1
 8000960:	d107      	bne.n	8000972 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	899b      	ldrh	r3, [r3, #12]
 8000966:	b29b      	uxth	r3, r3
 8000968:	461a      	mov	r2, r3
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	4013      	ands	r3, r2
 800096e:	617b      	str	r3, [r7, #20]
 8000970:	e011      	b.n	8000996 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	2b02      	cmp	r3, #2
 8000976:	d107      	bne.n	8000988 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	8a1b      	ldrh	r3, [r3, #16]
 800097c:	b29b      	uxth	r3, r3
 800097e:	461a      	mov	r2, r3
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	4013      	ands	r3, r2
 8000984:	617b      	str	r3, [r7, #20]
 8000986:	e006      	b.n	8000996 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	8a9b      	ldrh	r3, [r3, #20]
 800098c:	b29b      	uxth	r3, r3
 800098e:	461a      	mov	r2, r3
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	4013      	ands	r3, r2
 8000994:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000996:	887b      	ldrh	r3, [r7, #2]
 8000998:	0a1b      	lsrs	r3, r3, #8
 800099a:	b29b      	uxth	r3, r3
 800099c:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800099e:	2201      	movs	r2, #1
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	461a      	mov	r2, r3
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	4013      	ands	r3, r2
 80009b4:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d005      	beq.n	80009c8 <USART_GetITStatus+0xa4>
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d002      	beq.n	80009c8 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 80009c2:	2301      	movs	r3, #1
 80009c4:	74fb      	strb	r3, [r7, #19]
 80009c6:	e001      	b.n	80009cc <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 80009c8:	2300      	movs	r3, #0
 80009ca:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 80009cc:	7cfb      	ldrb	r3, [r7, #19]
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	371c      	adds	r7, #28
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
	...

080009dc <TM_Delay_Init>:
#include "delay.h"

uint32_t multiplier;

void TM_Delay_Init(void) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
    RCC_ClocksTypeDef RCC_Clocks;

    /* Get system clocks */
    RCC_GetClocksFreq(&RCC_Clocks);
 80009e2:	463b      	mov	r3, r7
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff fd11 	bl	800040c <RCC_GetClocksFreq>

    /* While loop takes 4 cycles */
    /* For 1 us delay, we need to divide with 4M */
    multiplier = RCC_Clocks.HCLK_Frequency / 4000000;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <TM_Delay_Init+0x24>)
 80009ee:	fba2 2303 	umull	r2, r3, r2, r3
 80009f2:	0d1b      	lsrs	r3, r3, #20
 80009f4:	4a03      	ldr	r2, [pc, #12]	; (8000a04 <TM_Delay_Init+0x28>)
 80009f6:	6013      	str	r3, [r2, #0]
}
 80009f8:	bf00      	nop
 80009fa:	3710      	adds	r7, #16
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	431bde83 	.word	0x431bde83
 8000a04:	20000038 	.word	0x20000038

08000a08 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000a12:	4909      	ldr	r1, [pc, #36]	; (8000a38 <NVIC_EnableIRQ+0x30>)
 8000a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a18:	095b      	lsrs	r3, r3, #5
 8000a1a:	79fa      	ldrb	r2, [r7, #7]
 8000a1c:	f002 021f 	and.w	r2, r2, #31
 8000a20:	2001      	movs	r0, #1
 8000a22:	fa00 f202 	lsl.w	r2, r0, r2
 8000a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000e100 	.word	0xe000e100

08000a3c <Init_USART2>:

uint32_t multiplier;


void Init_USART2()
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0

    /* Bit configuration structure for GPIOA PIN9 and PIN10 */
    GPIO_InitTypeDef GPIO_InitStruct;
    /* Enalbe clock for USART1, AFIO and GPIOA */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000a42:	2101      	movs	r1, #1
 8000a44:	2008      	movs	r0, #8
 8000a46:	f7ff fddb 	bl	8000600 <RCC_AHB1PeriphClockCmd>



    GPIO_PinAFConfig(GPIOD, GPIO_PinSource5, GPIO_AF_USART2);
 8000a4a:	2207      	movs	r2, #7
 8000a4c:	2105      	movs	r1, #5
 8000a4e:	481f      	ldr	r0, [pc, #124]	; (8000acc <Init_USART2+0x90>)
 8000a50:	f7ff fc92 	bl	8000378 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource6, GPIO_AF_USART2);
 8000a54:	2207      	movs	r2, #7
 8000a56:	2106      	movs	r1, #6
 8000a58:	481c      	ldr	r0, [pc, #112]	; (8000acc <Init_USART2+0x90>)
 8000a5a:	f7ff fc8d 	bl	8000378 <GPIO_PinAFConfig>
    // Initialize pins as alternating function
    GPIO_InitStruct.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6;
 8000a5e:	2360      	movs	r3, #96	; 0x60
 8000a60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000a62:	2302      	movs	r3, #2
 8000a64:	753b      	strb	r3, [r7, #20]
    GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000a66:	2300      	movs	r3, #0
 8000a68:	75bb      	strb	r3, [r7, #22]
    GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	75fb      	strb	r3, [r7, #23]
    GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a6e:	f107 0310 	add.w	r3, r7, #16
 8000a72:	4619      	mov	r1, r3
 8000a74:	4815      	ldr	r0, [pc, #84]	; (8000acc <Init_USART2+0x90>)
 8000a76:	f7ff fbd7 	bl	8000228 <GPIO_Init>


    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000a80:	f7ff fdde 	bl	8000640 <RCC_APB1PeriphClockCmd>

    USART_Cmd(USART2, ENABLE);
 8000a84:	2101      	movs	r1, #1
 8000a86:	4812      	ldr	r0, [pc, #72]	; (8000ad0 <Init_USART2+0x94>)
 8000a88:	f7ff fed4 	bl	8000834 <USART_Cmd>

	USART_InitTypeDef USART_InitStructure;
	USART_InitStructure.USART_BaudRate = 9600;
 8000a8c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000a90:	603b      	str	r3, [r7, #0]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8000a92:	2300      	movs	r3, #0
 8000a94:	80bb      	strh	r3, [r7, #4]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8000a96:	2300      	movs	r3, #0
 8000a98:	80fb      	strh	r3, [r7, #6]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000a9a:	230c      	movs	r3, #12
 8000a9c:	817b      	strh	r3, [r7, #10]
	USART_InitStructure.USART_Parity = USART_Parity_No ;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	813b      	strh	r3, [r7, #8]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	81bb      	strh	r3, [r7, #12]
    /* Configure USART1 */
    USART_Init(USART2, &USART_InitStructure);
 8000aa6:	463b      	mov	r3, r7
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4809      	ldr	r0, [pc, #36]	; (8000ad0 <Init_USART2+0x94>)
 8000aac:	f7ff fe08 	bl	80006c0 <USART_Init>
    /* Enable RXNE interrupt */
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	f240 5125 	movw	r1, #1317	; 0x525
 8000ab6:	4806      	ldr	r0, [pc, #24]	; (8000ad0 <Init_USART2+0x94>)
 8000ab8:	f7ff feec 	bl	8000894 <USART_ITConfig>


	// Enable interrupt fromUSART2(NVIC level)
	NVIC_EnableIRQ(USART2_IRQn);
 8000abc:	2026      	movs	r0, #38	; 0x26
 8000abe:	f7ff ffa3 	bl	8000a08 <NVIC_EnableIRQ>
}
 8000ac2:	bf00      	nop
 8000ac4:	3718      	adds	r7, #24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40020c00 	.word	0x40020c00
 8000ad0:	40004400 	.word	0x40004400

08000ad4 <Init_USART6>:

void Init_USART6()
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0

    /* Bit configuration structure for GPIOA PIN9 and PIN10 */
    GPIO_InitTypeDef GPIO_InitStruct;
    /* Enalbe clock for USART1, AFIO and GPIOA */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000ada:	2101      	movs	r1, #1
 8000adc:	2004      	movs	r0, #4
 8000ade:	f7ff fd8f 	bl	8000600 <RCC_AHB1PeriphClockCmd>



    GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_USART6);
 8000ae2:	2208      	movs	r2, #8
 8000ae4:	2106      	movs	r1, #6
 8000ae6:	481e      	ldr	r0, [pc, #120]	; (8000b60 <Init_USART6+0x8c>)
 8000ae8:	f7ff fc46 	bl	8000378 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_USART6);
 8000aec:	2208      	movs	r2, #8
 8000aee:	2107      	movs	r1, #7
 8000af0:	481b      	ldr	r0, [pc, #108]	; (8000b60 <Init_USART6+0x8c>)
 8000af2:	f7ff fc41 	bl	8000378 <GPIO_PinAFConfig>
    GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 8000af6:	23c0      	movs	r3, #192	; 0xc0
 8000af8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000afa:	2302      	movs	r3, #2
 8000afc:	753b      	strb	r3, [r7, #20]
    GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000afe:	2300      	movs	r3, #0
 8000b00:	75bb      	strb	r3, [r7, #22]
    GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	75fb      	strb	r3, [r7, #23]
    GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b06:	f107 0310 	add.w	r3, r7, #16
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4814      	ldr	r0, [pc, #80]	; (8000b60 <Init_USART6+0x8c>)
 8000b0e:	f7ff fb8b 	bl	8000228 <GPIO_Init>


    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
 8000b12:	2101      	movs	r1, #1
 8000b14:	2020      	movs	r0, #32
 8000b16:	f7ff fdb3 	bl	8000680 <RCC_APB2PeriphClockCmd>

    USART_Cmd(USART6, ENABLE);
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	4811      	ldr	r0, [pc, #68]	; (8000b64 <Init_USART6+0x90>)
 8000b1e:	f7ff fe89 	bl	8000834 <USART_Cmd>

	USART_InitTypeDef USART_InitStructure;
	USART_InitStructure.USART_BaudRate = 9600;
 8000b22:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000b26:	603b      	str	r3, [r7, #0]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	80bb      	strh	r3, [r7, #4]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	80fb      	strh	r3, [r7, #6]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000b30:	230c      	movs	r3, #12
 8000b32:	817b      	strh	r3, [r7, #10]
	USART_InitStructure.USART_Parity = USART_Parity_No ;
 8000b34:	2300      	movs	r3, #0
 8000b36:	813b      	strh	r3, [r7, #8]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	81bb      	strh	r3, [r7, #12]
    /* Configure USART1 */
    USART_Init(USART6, &USART_InitStructure);
 8000b3c:	463b      	mov	r3, r7
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4808      	ldr	r0, [pc, #32]	; (8000b64 <Init_USART6+0x90>)
 8000b42:	f7ff fdbd 	bl	80006c0 <USART_Init>
    /* Enable RXNE interrupt */
    USART_ITConfig(USART6, USART_IT_RXNE, ENABLE);
 8000b46:	2201      	movs	r2, #1
 8000b48:	f240 5125 	movw	r1, #1317	; 0x525
 8000b4c:	4805      	ldr	r0, [pc, #20]	; (8000b64 <Init_USART6+0x90>)
 8000b4e:	f7ff fea1 	bl	8000894 <USART_ITConfig>


	// Enable interrupt fromUSART2(NVIC level)
	NVIC_EnableIRQ(USART6_IRQn);
 8000b52:	2047      	movs	r0, #71	; 0x47
 8000b54:	f7ff ff58 	bl	8000a08 <NVIC_EnableIRQ>
}
 8000b58:	bf00      	nop
 8000b5a:	3718      	adds	r7, #24
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40020800 	.word	0x40020800
 8000b64:	40011400 	.word	0x40011400

08000b68 <USART2_IRQHandler>:

volatile char recieveBuffer[2000];
volatile int i = 0;

void USART2_IRQHandler()
{
 8000b68:	b598      	push	{r3, r4, r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
	//USART_SendData(USART2, 'T');
	// Do Something    /* RXNE handler */
	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8000b6c:	f240 5125 	movw	r1, #1317	; 0x525
 8000b70:	4814      	ldr	r0, [pc, #80]	; (8000bc4 <USART2_IRQHandler+0x5c>)
 8000b72:	f7ff fed7 	bl	8000924 <USART_GetITStatus>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d020      	beq.n	8000bbe <USART2_IRQHandler+0x56>
	{
		recieveBuffer[i] = (char)USART_ReceiveData(USART2);
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <USART2_IRQHandler+0x60>)
 8000b7e:	681c      	ldr	r4, [r3, #0]
 8000b80:	4810      	ldr	r0, [pc, #64]	; (8000bc4 <USART2_IRQHandler+0x5c>)
 8000b82:	f7ff fe77 	bl	8000874 <USART_ReceiveData>
 8000b86:	4603      	mov	r3, r0
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <USART2_IRQHandler+0x64>)
 8000b8c:	551a      	strb	r2, [r3, r4]
		if(recieveBuffer[i] == '\r')
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <USART2_IRQHandler+0x60>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <USART2_IRQHandler+0x64>)
 8000b94:	5cd3      	ldrb	r3, [r2, r3]
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	2b0d      	cmp	r3, #13
 8000b9a:	d10b      	bne.n	8000bb4 <USART2_IRQHandler+0x4c>
		{
			recieveBuffer[i]=0;
 8000b9c:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <USART2_IRQHandler+0x60>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <USART2_IRQHandler+0x64>)
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	54d1      	strb	r1, [r2, r3]
			printf("%s\n",recieveBuffer);
 8000ba6:	4809      	ldr	r0, [pc, #36]	; (8000bcc <USART2_IRQHandler+0x64>)
 8000ba8:	f000 fb5c 	bl	8001264 <puts>
			i = 0;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <USART2_IRQHandler+0x60>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
		{
			i++;
		}

	}
}
 8000bb2:	e004      	b.n	8000bbe <USART2_IRQHandler+0x56>
			i++;
 8000bb4:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <USART2_IRQHandler+0x60>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	4a03      	ldr	r2, [pc, #12]	; (8000bc8 <USART2_IRQHandler+0x60>)
 8000bbc:	6013      	str	r3, [r2, #0]
}
 8000bbe:	bf00      	nop
 8000bc0:	bd98      	pop	{r3, r4, r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40004400 	.word	0x40004400
 8000bc8:	2000002c 	.word	0x2000002c
 8000bcc:	2000003c 	.word	0x2000003c

08000bd0 <UU_PutChar>:

void UU_PutChar(USART_TypeDef* USARTx, uint8_t ch)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	460b      	mov	r3, r1
 8000bda:	70fb      	strb	r3, [r7, #3]
  while(!(USARTx->SR & USART_SR_TXE));
 8000bdc:	bf00      	nop
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d0f8      	beq.n	8000bde <UU_PutChar+0xe>
  USARTx->DR = ch;
 8000bec:	78fb      	ldrb	r3, [r7, #3]
 8000bee:	b29a      	uxth	r2, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	809a      	strh	r2, [r3, #4]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <UU_PutString>:

void UU_PutString(USART_TypeDef* USARTx, char * str)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
  while(*str != 0)
 8000c0a:	e008      	b.n	8000c1e <UU_PutString+0x1e>
  {
    UU_PutChar(USARTx, *str);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	4619      	mov	r1, r3
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f7ff ffdc 	bl	8000bd0 <UU_PutChar>
    str++;
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	603b      	str	r3, [r7, #0]
  while(*str != 0)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d1f2      	bne.n	8000c0c <UU_PutString+0xc>
  }
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <USART6_IRQHandler>:

char recieveBuffer1[4000];
int n = 0;
int rows_count = 0;
void USART6_IRQHandler()
{
 8000c30:	b598      	push	{r3, r4, r7, lr}
 8000c32:	af00      	add	r7, sp, #0
	//USART_SendData(USART2, 'T');
	// Do Something    /* RXNE handler */
	if(USART_GetITStatus(USART6, USART_IT_RXNE) != RESET)
 8000c34:	f240 5125 	movw	r1, #1317	; 0x525
 8000c38:	4826      	ldr	r0, [pc, #152]	; (8000cd4 <USART6_IRQHandler+0xa4>)
 8000c3a:	f7ff fe73 	bl	8000924 <USART_GetITStatus>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d044      	beq.n	8000cce <USART6_IRQHandler+0x9e>
	{
			recieveBuffer1[n] = (char)USART_ReceiveData(USART6);
 8000c44:	4b24      	ldr	r3, [pc, #144]	; (8000cd8 <USART6_IRQHandler+0xa8>)
 8000c46:	681c      	ldr	r4, [r3, #0]
 8000c48:	4822      	ldr	r0, [pc, #136]	; (8000cd4 <USART6_IRQHandler+0xa4>)
 8000c4a:	f7ff fe13 	bl	8000874 <USART_ReceiveData>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4b22      	ldr	r3, [pc, #136]	; (8000cdc <USART6_IRQHandler+0xac>)
 8000c54:	551a      	strb	r2, [r3, r4]
			if(recieveBuffer1[n] == '\n')
 8000c56:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <USART6_IRQHandler+0xa8>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a20      	ldr	r2, [pc, #128]	; (8000cdc <USART6_IRQHandler+0xac>)
 8000c5c:	5cd3      	ldrb	r3, [r2, r3]
 8000c5e:	2b0a      	cmp	r3, #10
 8000c60:	d130      	bne.n	8000cc4 <USART6_IRQHandler+0x94>
			{

				if(rows_count>10)
 8000c62:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <USART6_IRQHandler+0xb0>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2b0a      	cmp	r3, #10
 8000c68:	dd21      	ble.n	8000cae <USART6_IRQHandler+0x7e>
				{
					recieveBuffer1[n+1] = "\r";
 8000c6a:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <USART6_IRQHandler+0xa8>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	4a1c      	ldr	r2, [pc, #112]	; (8000ce4 <USART6_IRQHandler+0xb4>)
 8000c72:	b2d1      	uxtb	r1, r2
 8000c74:	4a19      	ldr	r2, [pc, #100]	; (8000cdc <USART6_IRQHandler+0xac>)
 8000c76:	54d1      	strb	r1, [r2, r3]
					recieveBuffer1[n+2] = 0;
 8000c78:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <USART6_IRQHandler+0xa8>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	3302      	adds	r3, #2
 8000c7e:	4a17      	ldr	r2, [pc, #92]	; (8000cdc <USART6_IRQHandler+0xac>)
 8000c80:	2100      	movs	r1, #0
 8000c82:	54d1      	strb	r1, [r2, r3]
					/*for(int i = 0; i<n;i++)
					{
						USART_SendData(USART2,(uint16_t)recieveBuffer1[i]);

					}*/
					printf("********************************/////   %d\n\n\n",n);
 8000c84:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <USART6_IRQHandler+0xa8>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4817      	ldr	r0, [pc, #92]	; (8000ce8 <USART6_IRQHandler+0xb8>)
 8000c8c:	f000 faa0 	bl	80011d0 <iprintf>
					printf("%s\n\r",recieveBuffer1);
 8000c90:	4912      	ldr	r1, [pc, #72]	; (8000cdc <USART6_IRQHandler+0xac>)
 8000c92:	4816      	ldr	r0, [pc, #88]	; (8000cec <USART6_IRQHandler+0xbc>)
 8000c94:	f000 fa9c 	bl	80011d0 <iprintf>
					n = 0;
 8000c98:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <USART6_IRQHandler+0xa8>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
					rows_count=0;
 8000c9e:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <USART6_IRQHandler+0xb0>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
					UU_PutString(USART2, recieveBuffer1);
 8000ca4:	490d      	ldr	r1, [pc, #52]	; (8000cdc <USART6_IRQHandler+0xac>)
 8000ca6:	4812      	ldr	r0, [pc, #72]	; (8000cf0 <USART6_IRQHandler+0xc0>)
 8000ca8:	f7ff ffaa 	bl	8000c00 <UU_PutString>
			}

//

	}
}
 8000cac:	e00f      	b.n	8000cce <USART6_IRQHandler+0x9e>
					rows_count++;
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <USART6_IRQHandler+0xb0>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <USART6_IRQHandler+0xb0>)
 8000cb6:	6013      	str	r3, [r2, #0]
					n++;
 8000cb8:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <USART6_IRQHandler+0xa8>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	4a06      	ldr	r2, [pc, #24]	; (8000cd8 <USART6_IRQHandler+0xa8>)
 8000cc0:	6013      	str	r3, [r2, #0]
}
 8000cc2:	e004      	b.n	8000cce <USART6_IRQHandler+0x9e>
				n++;
 8000cc4:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <USART6_IRQHandler+0xa8>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	4a03      	ldr	r2, [pc, #12]	; (8000cd8 <USART6_IRQHandler+0xa8>)
 8000ccc:	6013      	str	r3, [r2, #0]
}
 8000cce:	bf00      	nop
 8000cd0:	bd98      	pop	{r3, r4, r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40011400 	.word	0x40011400
 8000cd8:	20000030 	.word	0x20000030
 8000cdc:	2000080c 	.word	0x2000080c
 8000ce0:	20000034 	.word	0x20000034
 8000ce4:	0800131c 	.word	0x0800131c
 8000ce8:	08001320 	.word	0x08001320
 8000cec:	08001350 	.word	0x08001350
 8000cf0:	40004400 	.word	0x40004400

08000cf4 <main>:

int main() {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0

	SystemInit();
 8000cfa:	f000 f8bd 	bl	8000e78 <SystemInit>

	TM_Delay_Init();
 8000cfe:	f7ff fe6d 	bl	80009dc <TM_Delay_Init>

	Init_USART2();
 8000d02:	f7ff fe9b 	bl	8000a3c <Init_USART2>

	Init_USART6();
 8000d06:	f7ff fee5 	bl	8000ad4 <Init_USART6>
	/* GPIOG Peripheral clock enable */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	2002      	movs	r0, #2
 8000d0e:	f7ff fc77 	bl	8000600 <RCC_AHB1PeriphClockCmd>

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000d12:	2101      	movs	r1, #1
 8000d14:	2004      	movs	r0, #4
 8000d16:	f7ff fc73 	bl	8000600 <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef  GPIO_InitStructure;

	/* Configure PG6 and PG8 in output pushpull mode */
	GPIO_InitStructure.GPIO_Pin = LED_PIN;
 8000d1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d1e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000d20:	2301      	movs	r3, #1
 8000d22:	733b      	strb	r3, [r7, #12]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000d24:	2300      	movs	r3, #0
 8000d26:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000d2c:	f107 0308 	add.w	r3, r7, #8
 8000d30:	4619      	mov	r1, r3
 8000d32:	4815      	ldr	r0, [pc, #84]	; (8000d88 <main+0x94>)
 8000d34:	f7ff fa78 	bl	8000228 <GPIO_Init>

	GPIO_InitTypeDef  GPIO_InitStructureIn;
	GPIO_InitStructureIn.GPIO_Pin = GPIO_Pin_13;
 8000d38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d3c:	603b      	str	r3, [r7, #0]
	GPIO_InitStructureIn.GPIO_Mode = GPIO_Mode_IN;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructureIn.GPIO_OType = GPIO_OType_PP;
 8000d42:	2300      	movs	r3, #0
 8000d44:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000d46:	2301      	movs	r3, #1
 8000d48:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(GPIOC, &GPIO_InitStructureIn);
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	480f      	ldr	r0, [pc, #60]	; (8000d8c <main+0x98>)
 8000d50:	f7ff fa6a 	bl	8000228 <GPIO_Init>

	printf("Ovo je zaista kul stvar");
 8000d54:	480e      	ldr	r0, [pc, #56]	; (8000d90 <main+0x9c>)
 8000d56:	f000 fa3b 	bl	80011d0 <iprintf>
	while (1)
	{
		if(GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_13)==1)
 8000d5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d5e:	480b      	ldr	r0, [pc, #44]	; (8000d8c <main+0x98>)
 8000d60:	f7ff faf0 	bl	8000344 <GPIO_ReadInputDataBit>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d108      	bne.n	8000d7c <main+0x88>
		{
			GPIOB->BSRRL = LED_PIN;
 8000d6a:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <main+0x94>)
 8000d6c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d70:	831a      	strh	r2, [r3, #24]
			UU_PutString(USART2, "Mali Mario\n\r");
 8000d72:	4908      	ldr	r1, [pc, #32]	; (8000d94 <main+0xa0>)
 8000d74:	4808      	ldr	r0, [pc, #32]	; (8000d98 <main+0xa4>)
 8000d76:	f7ff ff43 	bl	8000c00 <UU_PutString>
 8000d7a:	e7ee      	b.n	8000d5a <main+0x66>

		}
		else
		{

			GPIOB->BSRRH = LED_PIN;
 8000d7c:	4b02      	ldr	r3, [pc, #8]	; (8000d88 <main+0x94>)
 8000d7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d82:	835a      	strh	r2, [r3, #26]
		if(GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_13)==1)
 8000d84:	e7e9      	b.n	8000d5a <main+0x66>
 8000d86:	bf00      	nop
 8000d88:	40020400 	.word	0x40020400
 8000d8c:	40020800 	.word	0x40020800
 8000d90:	08001358 	.word	0x08001358
 8000d94:	08001370 	.word	0x08001370
 8000d98:	40004400 	.word	0x40004400

08000d9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000d9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000da0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000da2:	e003      	b.n	8000dac <LoopCopyDataInit>

08000da4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000da6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000da8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000daa:	3104      	adds	r1, #4

08000dac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000dac:	480b      	ldr	r0, [pc, #44]	; (8000ddc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000dae:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000db0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000db2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000db4:	d3f6      	bcc.n	8000da4 <CopyDataInit>
  ldr  r2, =_sbss
 8000db6:	4a0b      	ldr	r2, [pc, #44]	; (8000de4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000db8:	e002      	b.n	8000dc0 <LoopFillZerobss>

08000dba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000dba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000dbc:	f842 3b04 	str.w	r3, [r2], #4

08000dc0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000dc0:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000dc2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000dc4:	d3f9      	bcc.n	8000dba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dc6:	f000 f857 	bl	8000e78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dca:	f000 fa77 	bl	80012bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dce:	f7ff ff91 	bl	8000cf4 <main>
  bx  lr    
 8000dd2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000dd4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000dd8:	0800138c 	.word	0x0800138c
  ldr  r0, =_sdata
 8000ddc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000de0:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000de4:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000de8:	200017ac 	.word	0x200017ac

08000dec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dec:	e7fe      	b.n	8000dec <ADC_IRQHandler>

08000dee <ITM_SendChar>:
    \param [in]     ch  Character to transmit.

    \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b083      	sub	sp, #12
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
  if ((ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8000df6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000dfa:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d012      	beq.n	8000e2c <ITM_SendChar+0x3e>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
 8000e06:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e0a:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000e0e:	f003 0301 	and.w	r3, r3, #1
  if ((ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d00a      	beq.n	8000e2c <ITM_SendChar+0x3e>
  {
    while (ITM->PORT[0].u32 == 0);
 8000e16:	bf00      	nop
 8000e18:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d0fa      	beq.n	8000e18 <ITM_SendChar+0x2a>
    ITM->PORT[0].u8 = (uint8_t) ch;
 8000e22:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	b2d2      	uxtb	r2, r2
 8000e2a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000e2c:	687b      	ldr	r3, [r7, #4]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b086      	sub	sp, #24
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	60f8      	str	r0, [r7, #12]
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	/* return len; */
	int i = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++)
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
 8000e4e:	e009      	b.n	8000e64 <_write+0x2a>
	{
		ITM_SendChar(*ptr++);
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	1c5a      	adds	r2, r3, #1
 8000e54:	60ba      	str	r2, [r7, #8]
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff ffc8 	bl	8000dee <ITM_SendChar>
	for(i=0;i<len;i++)
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	3301      	adds	r3, #1
 8000e62:	617b      	str	r3, [r7, #20]
 8000e64:	697a      	ldr	r2, [r7, #20]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	dbf1      	blt.n	8000e50 <_write+0x16>
	}
	
	return len;
 8000e6c:	687b      	ldr	r3, [r7, #4]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e7c:	4a16      	ldr	r2, [pc, #88]	; (8000ed8 <SystemInit+0x60>)
 8000e7e:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <SystemInit+0x60>)
 8000e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000e8c:	4a13      	ldr	r2, [pc, #76]	; (8000edc <SystemInit+0x64>)
 8000e8e:	4b13      	ldr	r3, [pc, #76]	; (8000edc <SystemInit+0x64>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e98:	4b10      	ldr	r3, [pc, #64]	; (8000edc <SystemInit+0x64>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000e9e:	4a0f      	ldr	r2, [pc, #60]	; (8000edc <SystemInit+0x64>)
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <SystemInit+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000ea8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eac:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000eae:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <SystemInit+0x64>)
 8000eb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ee0 <SystemInit+0x68>)
 8000eb2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000eb4:	4a09      	ldr	r2, [pc, #36]	; (8000edc <SystemInit+0x64>)
 8000eb6:	4b09      	ldr	r3, [pc, #36]	; (8000edc <SystemInit+0x64>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ebe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <SystemInit+0x64>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ec6:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <SystemInit+0x60>)
 8000ec8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ecc:	609a      	str	r2, [r3, #8]
#endif
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000ed00 	.word	0xe000ed00
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	24003010 	.word	0x24003010

08000ee4 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b087      	sub	sp, #28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
	int div = 1;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8000ef4:	e004      	b.n	8000f00 <ts_itoa+0x1c>
		div *= base;
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	fb02 f303 	mul.w	r3, r2, r3
 8000efe:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d2f3      	bcs.n	8000ef6 <ts_itoa+0x12>

	while (div != 0)
 8000f0e:	e029      	b.n	8000f64 <ts_itoa+0x80>
	{
		int num = d/div;
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f18:	613b      	str	r3, [r7, #16]
		d = d%div;
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f22:	fb02 f201 	mul.w	r2, r2, r1
 8000f26:	1a9b      	subs	r3, r3, r2
 8000f28:	60bb      	str	r3, [r7, #8]
		div /= base;
 8000f2a:	697a      	ldr	r2, [r7, #20]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f32:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	2b09      	cmp	r3, #9
 8000f38:	dd0a      	ble.n	8000f50 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	1c59      	adds	r1, r3, #1
 8000f40:	68fa      	ldr	r2, [r7, #12]
 8000f42:	6011      	str	r1, [r2, #0]
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	3237      	adds	r2, #55	; 0x37
 8000f4a:	b2d2      	uxtb	r2, r2
 8000f4c:	701a      	strb	r2, [r3, #0]
 8000f4e:	e009      	b.n	8000f64 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	1c59      	adds	r1, r3, #1
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	6011      	str	r1, [r2, #0]
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	3230      	adds	r2, #48	; 0x30
 8000f60:	b2d2      	uxtb	r2, r2
 8000f62:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d1d2      	bne.n	8000f10 <ts_itoa+0x2c>
	}
}
 8000f6a:	bf00      	nop
 8000f6c:	371c      	adds	r7, #28
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b088      	sub	sp, #32
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	60f8      	str	r0, [r7, #12]
 8000f7e:	60b9      	str	r1, [r7, #8]
 8000f80:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8000f86:	e07d      	b.n	8001084 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b25      	cmp	r3, #37	; 0x25
 8000f8e:	d171      	bne.n	8001074 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	3301      	adds	r3, #1
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b64      	cmp	r3, #100	; 0x64
 8000f9c:	d01e      	beq.n	8000fdc <ts_formatstring+0x66>
 8000f9e:	2b64      	cmp	r3, #100	; 0x64
 8000fa0:	dc06      	bgt.n	8000fb0 <ts_formatstring+0x3a>
 8000fa2:	2b58      	cmp	r3, #88	; 0x58
 8000fa4:	d050      	beq.n	8001048 <ts_formatstring+0xd2>
 8000fa6:	2b63      	cmp	r3, #99	; 0x63
 8000fa8:	d00e      	beq.n	8000fc8 <ts_formatstring+0x52>
 8000faa:	2b25      	cmp	r3, #37	; 0x25
 8000fac:	d058      	beq.n	8001060 <ts_formatstring+0xea>
 8000fae:	e05d      	b.n	800106c <ts_formatstring+0xf6>
 8000fb0:	2b73      	cmp	r3, #115	; 0x73
 8000fb2:	d02b      	beq.n	800100c <ts_formatstring+0x96>
 8000fb4:	2b73      	cmp	r3, #115	; 0x73
 8000fb6:	dc02      	bgt.n	8000fbe <ts_formatstring+0x48>
 8000fb8:	2b69      	cmp	r3, #105	; 0x69
 8000fba:	d00f      	beq.n	8000fdc <ts_formatstring+0x66>
 8000fbc:	e056      	b.n	800106c <ts_formatstring+0xf6>
 8000fbe:	2b75      	cmp	r3, #117	; 0x75
 8000fc0:	d037      	beq.n	8001032 <ts_formatstring+0xbc>
 8000fc2:	2b78      	cmp	r3, #120	; 0x78
 8000fc4:	d040      	beq.n	8001048 <ts_formatstring+0xd2>
 8000fc6:	e051      	b.n	800106c <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	1c5a      	adds	r2, r3, #1
 8000fcc:	60fa      	str	r2, [r7, #12]
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	1d11      	adds	r1, r2, #4
 8000fd2:	6079      	str	r1, [r7, #4]
 8000fd4:	6812      	ldr	r2, [r2, #0]
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	701a      	strb	r2, [r3, #0]
				break;
 8000fda:	e047      	b.n	800106c <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	1d1a      	adds	r2, r3, #4
 8000fe0:	607a      	str	r2, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	da07      	bge.n	8000ffc <ts_formatstring+0x86>
					{
						val *= -1;
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	425b      	negs	r3, r3
 8000ff0:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	1c5a      	adds	r2, r3, #1
 8000ff6:	60fa      	str	r2, [r7, #12]
 8000ff8:	222d      	movs	r2, #45	; 0x2d
 8000ffa:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8000ffc:	69f9      	ldr	r1, [r7, #28]
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	220a      	movs	r2, #10
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ff6d 	bl	8000ee4 <ts_itoa>
				}
				break;
 800100a:	e02f      	b.n	800106c <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	1d1a      	adds	r2, r3, #4
 8001010:	607a      	str	r2, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8001016:	e007      	b.n	8001028 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	1c5a      	adds	r2, r3, #1
 800101c:	60fa      	str	r2, [r7, #12]
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	1c51      	adds	r1, r2, #1
 8001022:	61b9      	str	r1, [r7, #24]
 8001024:	7812      	ldrb	r2, [r2, #0]
 8001026:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d1f3      	bne.n	8001018 <ts_formatstring+0xa2>
					}
				}
				break;
 8001030:	e01c      	b.n	800106c <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	1d1a      	adds	r2, r3, #4
 8001036:	607a      	str	r2, [r7, #4]
 8001038:	6819      	ldr	r1, [r3, #0]
 800103a:	f107 030c 	add.w	r3, r7, #12
 800103e:	220a      	movs	r2, #10
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff4f 	bl	8000ee4 <ts_itoa>
				break;
 8001046:	e011      	b.n	800106c <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	1d1a      	adds	r2, r3, #4
 800104c:	607a      	str	r2, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4619      	mov	r1, r3
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	2210      	movs	r2, #16
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff43 	bl	8000ee4 <ts_itoa>
				break;
 800105e:	e005      	b.n	800106c <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	1c5a      	adds	r2, r3, #1
 8001064:	60fa      	str	r2, [r7, #12]
 8001066:	2225      	movs	r2, #37	; 0x25
 8001068:	701a      	strb	r2, [r3, #0]
				  break;
 800106a:	bf00      	nop
			}
			fmt++;
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	3301      	adds	r3, #1
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	e007      	b.n	8001084 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	1c5a      	adds	r2, r3, #1
 8001078:	60fa      	str	r2, [r7, #12]
 800107a:	68ba      	ldr	r2, [r7, #8]
 800107c:	1c51      	adds	r1, r2, #1
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	7812      	ldrb	r2, [r2, #0]
 8001082:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	f47f af7d 	bne.w	8000f88 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	461a      	mov	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	1ad3      	subs	r3, r2, r3
}
 800109c:	4618      	mov	r0, r3
 800109e:	3720      	adds	r7, #32
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
	int length = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 80010b2:	e081      	b.n	80011b8 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b25      	cmp	r3, #37	; 0x25
 80010ba:	d177      	bne.n	80011ac <ts_formatlength+0x108>
		{
			++fmt;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3301      	adds	r3, #1
 80010c0:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	3b58      	subs	r3, #88	; 0x58
 80010c8:	2b20      	cmp	r3, #32
 80010ca:	d86a      	bhi.n	80011a2 <ts_formatlength+0xfe>
 80010cc:	a201      	add	r2, pc, #4	; (adr r2, 80010d4 <ts_formatlength+0x30>)
 80010ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d2:	bf00      	nop
 80010d4:	08001195 	.word	0x08001195
 80010d8:	080011a3 	.word	0x080011a3
 80010dc:	080011a3 	.word	0x080011a3
 80010e0:	080011a3 	.word	0x080011a3
 80010e4:	080011a3 	.word	0x080011a3
 80010e8:	080011a3 	.word	0x080011a3
 80010ec:	080011a3 	.word	0x080011a3
 80010f0:	080011a3 	.word	0x080011a3
 80010f4:	080011a3 	.word	0x080011a3
 80010f8:	080011a3 	.word	0x080011a3
 80010fc:	080011a3 	.word	0x080011a3
 8001100:	08001159 	.word	0x08001159
 8001104:	08001167 	.word	0x08001167
 8001108:	080011a3 	.word	0x080011a3
 800110c:	080011a3 	.word	0x080011a3
 8001110:	080011a3 	.word	0x080011a3
 8001114:	080011a3 	.word	0x080011a3
 8001118:	08001167 	.word	0x08001167
 800111c:	080011a3 	.word	0x080011a3
 8001120:	080011a3 	.word	0x080011a3
 8001124:	080011a3 	.word	0x080011a3
 8001128:	080011a3 	.word	0x080011a3
 800112c:	080011a3 	.word	0x080011a3
 8001130:	080011a3 	.word	0x080011a3
 8001134:	080011a3 	.word	0x080011a3
 8001138:	080011a3 	.word	0x080011a3
 800113c:	080011a3 	.word	0x080011a3
 8001140:	08001175 	.word	0x08001175
 8001144:	080011a3 	.word	0x080011a3
 8001148:	08001167 	.word	0x08001167
 800114c:	080011a3 	.word	0x080011a3
 8001150:	080011a3 	.word	0x080011a3
 8001154:	08001195 	.word	0x08001195
			{
			  case 'c':
		  		  va_arg(va, int);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	3304      	adds	r3, #4
 800115c:	603b      	str	r3, [r7, #0]
				  ++length;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	3301      	adds	r3, #1
 8001162:	60fb      	str	r3, [r7, #12]
				  break;
 8001164:	e025      	b.n	80011b2 <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	330b      	adds	r3, #11
 800116a:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	3304      	adds	r3, #4
 8001170:	603b      	str	r3, [r7, #0]
				  break;
 8001172:	e01e      	b.n	80011b2 <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	1d1a      	adds	r2, r3, #4
 8001178:	603a      	str	r2, [r7, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 800117e:	e002      	b.n	8001186 <ts_formatlength+0xe2>
			  			  ++length;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	3301      	adds	r3, #1
 8001184:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	1c5a      	adds	r2, r3, #1
 800118a:	60ba      	str	r2, [r7, #8]
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1f6      	bne.n	8001180 <ts_formatlength+0xdc>
			  	  }
				  break;
 8001192:	e00e      	b.n	80011b2 <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	3308      	adds	r3, #8
 8001198:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	3304      	adds	r3, #4
 800119e:	603b      	str	r3, [r7, #0]
				  break;
 80011a0:	e007      	b.n	80011b2 <ts_formatlength+0x10e>
			  default:
				  ++length;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	3301      	adds	r3, #1
 80011a6:	60fb      	str	r3, [r7, #12]
				  break;
 80011a8:	bf00      	nop
 80011aa:	e002      	b.n	80011b2 <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	3301      	adds	r3, #1
 80011b0:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3301      	adds	r3, #1
 80011b6:	607b      	str	r3, [r7, #4]
	while (*fmt)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f47f af79 	bne.w	80010b4 <ts_formatlength+0x10>
	}
	return length;
 80011c2:	68fb      	ldr	r3, [r7, #12]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 80011d0:	b40f      	push	{r0, r1, r2, r3}
 80011d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
	int length = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 80011de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011e2:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 80011e4:	6839      	ldr	r1, [r7, #0]
 80011e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011e8:	f7ff ff5c 	bl	80010a4 <ts_formatlength>
 80011ec:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 80011ee:	466b      	mov	r3, sp
 80011f0:	461e      	mov	r6, r3
		char buf[length];
 80011f2:	68f9      	ldr	r1, [r7, #12]
 80011f4:	1e4b      	subs	r3, r1, #1
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	460b      	mov	r3, r1
 80011fa:	461a      	mov	r2, r3
 80011fc:	f04f 0300 	mov.w	r3, #0
 8001200:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8001204:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8001208:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800120c:	460b      	mov	r3, r1
 800120e:	461a      	mov	r2, r3
 8001210:	f04f 0300 	mov.w	r3, #0
 8001214:	00dd      	lsls	r5, r3, #3
 8001216:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800121a:	00d4      	lsls	r4, r2, #3
 800121c:	460b      	mov	r3, r1
 800121e:	3307      	adds	r3, #7
 8001220:	08db      	lsrs	r3, r3, #3
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	ebad 0d03 	sub.w	sp, sp, r3
 8001228:	466b      	mov	r3, sp
 800122a:	3300      	adds	r3, #0
 800122c:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 800122e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001232:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fe9b 	bl	8000f76 <ts_formatstring>
 8001240:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68fa      	ldr	r2, [r7, #12]
 8001246:	4619      	mov	r1, r3
 8001248:	2001      	movs	r0, #1
 800124a:	f7ff fdf6 	bl	8000e3a <_write>
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 8001252:	68fb      	ldr	r3, [r7, #12]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800125e:	b004      	add	sp, #16
 8001260:	4770      	bx	lr
	...

08001264 <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	int length = strlen(s);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7fe ffd3 	bl	8000218 <strlen>
 8001272:	4603      	mov	r3, r0
 8001274:	613b      	str	r3, [r7, #16]
	int numbytes = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
	int res;

	numbytes = _write(1, (char*)s, length);
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	2001      	movs	r0, #1
 8001280:	f7ff fddb 	bl	8000e3a <_write>
 8001284:	60f8      	str	r0, [r7, #12]
	numbytes += _write(1, "\n", 1);
 8001286:	2201      	movs	r2, #1
 8001288:	490b      	ldr	r1, [pc, #44]	; (80012b8 <puts+0x54>)
 800128a:	2001      	movs	r0, #1
 800128c:	f7ff fdd5 	bl	8000e3a <_write>
 8001290:	4602      	mov	r2, r0
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	4413      	add	r3, r2
 8001296:	60fb      	str	r3, [r7, #12]

	if (numbytes == (length+1))
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1c5a      	adds	r2, r3, #1
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d102      	bne.n	80012a8 <puts+0x44>
	{
		res = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	e002      	b.n	80012ae <puts+0x4a>
	}
	else
	{
		res = EOF;
 80012a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012ac:	617b      	str	r3, [r7, #20]
	}

	return res;
 80012ae:	697b      	ldr	r3, [r7, #20]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	08001380 	.word	0x08001380

080012bc <__libc_init_array>:
 80012bc:	b570      	push	{r4, r5, r6, lr}
 80012be:	4e0d      	ldr	r6, [pc, #52]	; (80012f4 <__libc_init_array+0x38>)
 80012c0:	4c0d      	ldr	r4, [pc, #52]	; (80012f8 <__libc_init_array+0x3c>)
 80012c2:	1ba4      	subs	r4, r4, r6
 80012c4:	10a4      	asrs	r4, r4, #2
 80012c6:	2500      	movs	r5, #0
 80012c8:	42a5      	cmp	r5, r4
 80012ca:	d109      	bne.n	80012e0 <__libc_init_array+0x24>
 80012cc:	4e0b      	ldr	r6, [pc, #44]	; (80012fc <__libc_init_array+0x40>)
 80012ce:	4c0c      	ldr	r4, [pc, #48]	; (8001300 <__libc_init_array+0x44>)
 80012d0:	f000 f818 	bl	8001304 <_init>
 80012d4:	1ba4      	subs	r4, r4, r6
 80012d6:	10a4      	asrs	r4, r4, #2
 80012d8:	2500      	movs	r5, #0
 80012da:	42a5      	cmp	r5, r4
 80012dc:	d105      	bne.n	80012ea <__libc_init_array+0x2e>
 80012de:	bd70      	pop	{r4, r5, r6, pc}
 80012e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80012e4:	4798      	blx	r3
 80012e6:	3501      	adds	r5, #1
 80012e8:	e7ee      	b.n	80012c8 <__libc_init_array+0xc>
 80012ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80012ee:	4798      	blx	r3
 80012f0:	3501      	adds	r5, #1
 80012f2:	e7f2      	b.n	80012da <__libc_init_array+0x1e>
 80012f4:	08001384 	.word	0x08001384
 80012f8:	08001384 	.word	0x08001384
 80012fc:	08001384 	.word	0x08001384
 8001300:	08001388 	.word	0x08001388

08001304 <_init>:
 8001304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001306:	bf00      	nop
 8001308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800130a:	bc08      	pop	{r3}
 800130c:	469e      	mov	lr, r3
 800130e:	4770      	bx	lr

08001310 <_fini>:
 8001310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001312:	bf00      	nop
 8001314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001316:	bc08      	pop	{r3}
 8001318:	469e      	mov	lr, r3
 800131a:	4770      	bx	lr
