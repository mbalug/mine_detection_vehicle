
mine_detection_vehicle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000099c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000b74  08000b74  00010b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000b98  08000b98  00010b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000b9c  08000b9c  00010b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08000ba0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000028  20000010  08000bb0  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000038  08000bb0  00020038  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00004ffa  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000d64  00000000  00000000  0002503a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000458  00000000  00000000  00025da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003e0  00000000  00000000  000261f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000018fb  00000000  00000000  000265d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001665  00000000  00000000  00027ed3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00029538  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001228  00000000  00000000  000295b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08000b5c 	.word	0x08000b5c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08000b5c 	.word	0x08000b5c

08000218 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000218:	b480      	push	{r7}
 800021a:	b087      	sub	sp, #28
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000222:	2300      	movs	r3, #0
 8000224:	617b      	str	r3, [r7, #20]
 8000226:	2300      	movs	r3, #0
 8000228:	613b      	str	r3, [r7, #16]
 800022a:	2300      	movs	r3, #0
 800022c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800022e:	2300      	movs	r3, #0
 8000230:	617b      	str	r3, [r7, #20]
 8000232:	e076      	b.n	8000322 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000234:	2201      	movs	r2, #1
 8000236:	697b      	ldr	r3, [r7, #20]
 8000238:	fa02 f303 	lsl.w	r3, r2, r3
 800023c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	693b      	ldr	r3, [r7, #16]
 8000244:	4013      	ands	r3, r2
 8000246:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000248:	68fa      	ldr	r2, [r7, #12]
 800024a:	693b      	ldr	r3, [r7, #16]
 800024c:	429a      	cmp	r2, r3
 800024e:	d165      	bne.n	800031c <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	681a      	ldr	r2, [r3, #0]
 8000254:	697b      	ldr	r3, [r7, #20]
 8000256:	005b      	lsls	r3, r3, #1
 8000258:	2103      	movs	r1, #3
 800025a:	fa01 f303 	lsl.w	r3, r1, r3
 800025e:	43db      	mvns	r3, r3
 8000260:	401a      	ands	r2, r3
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	681a      	ldr	r2, [r3, #0]
 800026a:	683b      	ldr	r3, [r7, #0]
 800026c:	791b      	ldrb	r3, [r3, #4]
 800026e:	4619      	mov	r1, r3
 8000270:	697b      	ldr	r3, [r7, #20]
 8000272:	005b      	lsls	r3, r3, #1
 8000274:	fa01 f303 	lsl.w	r3, r1, r3
 8000278:	431a      	orrs	r2, r3
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	791b      	ldrb	r3, [r3, #4]
 8000282:	2b01      	cmp	r3, #1
 8000284:	d003      	beq.n	800028e <GPIO_Init+0x76>
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	791b      	ldrb	r3, [r3, #4]
 800028a:	2b02      	cmp	r3, #2
 800028c:	d12e      	bne.n	80002ec <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	689a      	ldr	r2, [r3, #8]
 8000292:	697b      	ldr	r3, [r7, #20]
 8000294:	005b      	lsls	r3, r3, #1
 8000296:	2103      	movs	r1, #3
 8000298:	fa01 f303 	lsl.w	r3, r1, r3
 800029c:	43db      	mvns	r3, r3
 800029e:	401a      	ands	r2, r3
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	689a      	ldr	r2, [r3, #8]
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	795b      	ldrb	r3, [r3, #5]
 80002ac:	4619      	mov	r1, r3
 80002ae:	697b      	ldr	r3, [r7, #20]
 80002b0:	005b      	lsls	r3, r3, #1
 80002b2:	fa01 f303 	lsl.w	r3, r1, r3
 80002b6:	431a      	orrs	r2, r3
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	685a      	ldr	r2, [r3, #4]
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	b29b      	uxth	r3, r3
 80002c4:	4619      	mov	r1, r3
 80002c6:	2301      	movs	r3, #1
 80002c8:	408b      	lsls	r3, r1
 80002ca:	43db      	mvns	r3, r3
 80002cc:	401a      	ands	r2, r3
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	685b      	ldr	r3, [r3, #4]
 80002d6:	683a      	ldr	r2, [r7, #0]
 80002d8:	7992      	ldrb	r2, [r2, #6]
 80002da:	4611      	mov	r1, r2
 80002dc:	697a      	ldr	r2, [r7, #20]
 80002de:	b292      	uxth	r2, r2
 80002e0:	fa01 f202 	lsl.w	r2, r1, r2
 80002e4:	b292      	uxth	r2, r2
 80002e6:	431a      	orrs	r2, r3
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	68da      	ldr	r2, [r3, #12]
 80002f0:	697b      	ldr	r3, [r7, #20]
 80002f2:	b29b      	uxth	r3, r3
 80002f4:	005b      	lsls	r3, r3, #1
 80002f6:	2103      	movs	r1, #3
 80002f8:	fa01 f303 	lsl.w	r3, r1, r3
 80002fc:	43db      	mvns	r3, r3
 80002fe:	401a      	ands	r2, r3
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	68da      	ldr	r2, [r3, #12]
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	79db      	ldrb	r3, [r3, #7]
 800030c:	4619      	mov	r1, r3
 800030e:	697b      	ldr	r3, [r7, #20]
 8000310:	005b      	lsls	r3, r3, #1
 8000312:	fa01 f303 	lsl.w	r3, r1, r3
 8000316:	431a      	orrs	r2, r3
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800031c:	697b      	ldr	r3, [r7, #20]
 800031e:	3301      	adds	r3, #1
 8000320:	617b      	str	r3, [r7, #20]
 8000322:	697b      	ldr	r3, [r7, #20]
 8000324:	2b0f      	cmp	r3, #15
 8000326:	d985      	bls.n	8000234 <GPIO_Init+0x1c>
    }
  }
}
 8000328:	bf00      	nop
 800032a:	371c      	adds	r7, #28
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr

08000334 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000334:	b480      	push	{r7}
 8000336:	b08b      	sub	sp, #44	; 0x2c
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800033c:	2300      	movs	r3, #0
 800033e:	623b      	str	r3, [r7, #32]
 8000340:	2300      	movs	r3, #0
 8000342:	61fb      	str	r3, [r7, #28]
 8000344:	2300      	movs	r3, #0
 8000346:	627b      	str	r3, [r7, #36]	; 0x24
 8000348:	2302      	movs	r3, #2
 800034a:	61bb      	str	r3, [r7, #24]
 800034c:	2300      	movs	r3, #0
 800034e:	617b      	str	r3, [r7, #20]
 8000350:	2302      	movs	r3, #2
 8000352:	613b      	str	r3, [r7, #16]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
 8000354:	2302      	movs	r3, #2
 8000356:	60fb      	str	r3, [r7, #12]
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000358:	4b6f      	ldr	r3, [pc, #444]	; (8000518 <RCC_GetClocksFreq+0x1e4>)
 800035a:	689b      	ldr	r3, [r3, #8]
 800035c:	f003 030c 	and.w	r3, r3, #12
 8000360:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8000362:	6a3b      	ldr	r3, [r7, #32]
 8000364:	2b0c      	cmp	r3, #12
 8000366:	f200 8091 	bhi.w	800048c <RCC_GetClocksFreq+0x158>
 800036a:	a201      	add	r2, pc, #4	; (adr r2, 8000370 <RCC_GetClocksFreq+0x3c>)
 800036c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000370:	080003a5 	.word	0x080003a5
 8000374:	0800048d 	.word	0x0800048d
 8000378:	0800048d 	.word	0x0800048d
 800037c:	0800048d 	.word	0x0800048d
 8000380:	080003ad 	.word	0x080003ad
 8000384:	0800048d 	.word	0x0800048d
 8000388:	0800048d 	.word	0x0800048d
 800038c:	0800048d 	.word	0x0800048d
 8000390:	080003b5 	.word	0x080003b5
 8000394:	0800048d 	.word	0x0800048d
 8000398:	0800048d 	.word	0x0800048d
 800039c:	0800048d 	.word	0x0800048d
 80003a0:	08000421 	.word	0x08000421
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	4a5d      	ldr	r2, [pc, #372]	; (800051c <RCC_GetClocksFreq+0x1e8>)
 80003a8:	601a      	str	r2, [r3, #0]
    break;
 80003aa:	e073      	b.n	8000494 <RCC_GetClocksFreq+0x160>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	4a5c      	ldr	r2, [pc, #368]	; (8000520 <RCC_GetClocksFreq+0x1ec>)
 80003b0:	601a      	str	r2, [r3, #0]
    break;
 80003b2:	e06f      	b.n	8000494 <RCC_GetClocksFreq+0x160>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80003b4:	4b58      	ldr	r3, [pc, #352]	; (8000518 <RCC_GetClocksFreq+0x1e4>)
 80003b6:	685b      	ldr	r3, [r3, #4]
 80003b8:	0d9b      	lsrs	r3, r3, #22
 80003ba:	f003 0301 	and.w	r3, r3, #1
 80003be:	617b      	str	r3, [r7, #20]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80003c0:	4b55      	ldr	r3, [pc, #340]	; (8000518 <RCC_GetClocksFreq+0x1e4>)
 80003c2:	685b      	ldr	r3, [r3, #4]
 80003c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80003c8:	613b      	str	r3, [r7, #16]
    
    if (pllsource != 0)
 80003ca:	697b      	ldr	r3, [r7, #20]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d00c      	beq.n	80003ea <RCC_GetClocksFreq+0xb6>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80003d0:	4a53      	ldr	r2, [pc, #332]	; (8000520 <RCC_GetClocksFreq+0x1ec>)
 80003d2:	693b      	ldr	r3, [r7, #16]
 80003d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80003d8:	4a4f      	ldr	r2, [pc, #316]	; (8000518 <RCC_GetClocksFreq+0x1e4>)
 80003da:	6852      	ldr	r2, [r2, #4]
 80003dc:	0992      	lsrs	r2, r2, #6
 80003de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80003e2:	fb02 f303 	mul.w	r3, r2, r3
 80003e6:	627b      	str	r3, [r7, #36]	; 0x24
 80003e8:	e00b      	b.n	8000402 <RCC_GetClocksFreq+0xce>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80003ea:	4a4c      	ldr	r2, [pc, #304]	; (800051c <RCC_GetClocksFreq+0x1e8>)
 80003ec:	693b      	ldr	r3, [r7, #16]
 80003ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80003f2:	4a49      	ldr	r2, [pc, #292]	; (8000518 <RCC_GetClocksFreq+0x1e4>)
 80003f4:	6852      	ldr	r2, [r2, #4]
 80003f6:	0992      	lsrs	r2, r2, #6
 80003f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80003fc:	fb02 f303 	mul.w	r3, r2, r3
 8000400:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000402:	4b45      	ldr	r3, [pc, #276]	; (8000518 <RCC_GetClocksFreq+0x1e4>)
 8000404:	685b      	ldr	r3, [r3, #4]
 8000406:	0c1b      	lsrs	r3, r3, #16
 8000408:	f003 0303 	and.w	r3, r3, #3
 800040c:	3301      	adds	r3, #1
 800040e:	005b      	lsls	r3, r3, #1
 8000410:	61bb      	str	r3, [r7, #24]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000414:	69bb      	ldr	r3, [r7, #24]
 8000416:	fbb2 f2f3 	udiv	r2, r2, r3
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	601a      	str	r2, [r3, #0]
    break;
 800041e:	e039      	b.n	8000494 <RCC_GetClocksFreq+0x160>
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
  case 0x0C:  /* PLL R used as system clock  source */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000420:	4b3d      	ldr	r3, [pc, #244]	; (8000518 <RCC_GetClocksFreq+0x1e4>)
 8000422:	685b      	ldr	r3, [r3, #4]
 8000424:	0d9b      	lsrs	r3, r3, #22
 8000426:	f003 0301 	and.w	r3, r3, #1
 800042a:	617b      	str	r3, [r7, #20]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800042c:	4b3a      	ldr	r3, [pc, #232]	; (8000518 <RCC_GetClocksFreq+0x1e4>)
 800042e:	685b      	ldr	r3, [r3, #4]
 8000430:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000434:	613b      	str	r3, [r7, #16]
    
    if (pllsource != 0)
 8000436:	697b      	ldr	r3, [r7, #20]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d00c      	beq.n	8000456 <RCC_GetClocksFreq+0x122>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800043c:	4a38      	ldr	r2, [pc, #224]	; (8000520 <RCC_GetClocksFreq+0x1ec>)
 800043e:	693b      	ldr	r3, [r7, #16]
 8000440:	fbb2 f3f3 	udiv	r3, r2, r3
 8000444:	4a34      	ldr	r2, [pc, #208]	; (8000518 <RCC_GetClocksFreq+0x1e4>)
 8000446:	6852      	ldr	r2, [r2, #4]
 8000448:	0992      	lsrs	r2, r2, #6
 800044a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800044e:	fb02 f303 	mul.w	r3, r2, r3
 8000452:	627b      	str	r3, [r7, #36]	; 0x24
 8000454:	e00b      	b.n	800046e <RCC_GetClocksFreq+0x13a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000456:	4a31      	ldr	r2, [pc, #196]	; (800051c <RCC_GetClocksFreq+0x1e8>)
 8000458:	693b      	ldr	r3, [r7, #16]
 800045a:	fbb2 f3f3 	udiv	r3, r2, r3
 800045e:	4a2e      	ldr	r2, [pc, #184]	; (8000518 <RCC_GetClocksFreq+0x1e4>)
 8000460:	6852      	ldr	r2, [r2, #4]
 8000462:	0992      	lsrs	r2, r2, #6
 8000464:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000468:	fb02 f303 	mul.w	r3, r2, r3
 800046c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
 800046e:	4b2a      	ldr	r3, [pc, #168]	; (8000518 <RCC_GetClocksFreq+0x1e4>)
 8000470:	685b      	ldr	r3, [r3, #4]
 8000472:	0f1b      	lsrs	r3, r3, #28
 8000474:	f003 0307 	and.w	r3, r3, #7
 8000478:	3301      	adds	r3, #1
 800047a:	005b      	lsls	r3, r3, #1
 800047c:	60fb      	str	r3, [r7, #12]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
 800047e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	fbb2 f2f3 	udiv	r2, r2, r3
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	601a      	str	r2, [r3, #0]
    break;
 800048a:	e003      	b.n	8000494 <RCC_GetClocksFreq+0x160>
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	4a23      	ldr	r2, [pc, #140]	; (800051c <RCC_GetClocksFreq+0x1e8>)
 8000490:	601a      	str	r2, [r3, #0]
    break;
 8000492:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000494:	4b20      	ldr	r3, [pc, #128]	; (8000518 <RCC_GetClocksFreq+0x1e4>)
 8000496:	689b      	ldr	r3, [r3, #8]
 8000498:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800049c:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 800049e:	6a3b      	ldr	r3, [r7, #32]
 80004a0:	091b      	lsrs	r3, r3, #4
 80004a2:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80004a4:	4a1f      	ldr	r2, [pc, #124]	; (8000524 <RCC_GetClocksFreq+0x1f0>)
 80004a6:	6a3b      	ldr	r3, [r7, #32]
 80004a8:	4413      	add	r3, r2
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	61fb      	str	r3, [r7, #28]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681a      	ldr	r2, [r3, #0]
 80004b4:	69fb      	ldr	r3, [r7, #28]
 80004b6:	40da      	lsrs	r2, r3
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80004bc:	4b16      	ldr	r3, [pc, #88]	; (8000518 <RCC_GetClocksFreq+0x1e4>)
 80004be:	689b      	ldr	r3, [r3, #8]
 80004c0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80004c4:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 10;
 80004c6:	6a3b      	ldr	r3, [r7, #32]
 80004c8:	0a9b      	lsrs	r3, r3, #10
 80004ca:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80004cc:	4a15      	ldr	r2, [pc, #84]	; (8000524 <RCC_GetClocksFreq+0x1f0>)
 80004ce:	6a3b      	ldr	r3, [r7, #32]
 80004d0:	4413      	add	r3, r2
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	61fb      	str	r3, [r7, #28]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	685a      	ldr	r2, [r3, #4]
 80004dc:	69fb      	ldr	r3, [r7, #28]
 80004de:	40da      	lsrs	r2, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80004e4:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <RCC_GetClocksFreq+0x1e4>)
 80004e6:	689b      	ldr	r3, [r3, #8]
 80004e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80004ec:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 13;
 80004ee:	6a3b      	ldr	r3, [r7, #32]
 80004f0:	0b5b      	lsrs	r3, r3, #13
 80004f2:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80004f4:	4a0b      	ldr	r2, [pc, #44]	; (8000524 <RCC_GetClocksFreq+0x1f0>)
 80004f6:	6a3b      	ldr	r3, [r7, #32]
 80004f8:	4413      	add	r3, r2
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	61fb      	str	r3, [r7, #28]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	685a      	ldr	r2, [r3, #4]
 8000504:	69fb      	ldr	r3, [r7, #28]
 8000506:	40da      	lsrs	r2, r3
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	60da      	str	r2, [r3, #12]
}
 800050c:	bf00      	nop
 800050e:	372c      	adds	r7, #44	; 0x2c
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr
 8000518:	40023800 	.word	0x40023800
 800051c:	00f42400 	.word	0x00f42400
 8000520:	007a1200 	.word	0x007a1200
 8000524:	20000000 	.word	0x20000000

08000528 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	460b      	mov	r3, r1
 8000532:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000534:	78fb      	ldrb	r3, [r7, #3]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d006      	beq.n	8000548 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800053a:	490a      	ldr	r1, [pc, #40]	; (8000564 <RCC_AHB1PeriphClockCmd+0x3c>)
 800053c:	4b09      	ldr	r3, [pc, #36]	; (8000564 <RCC_AHB1PeriphClockCmd+0x3c>)
 800053e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	4313      	orrs	r3, r2
 8000544:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000546:	e006      	b.n	8000556 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000548:	4906      	ldr	r1, [pc, #24]	; (8000564 <RCC_AHB1PeriphClockCmd+0x3c>)
 800054a:	4b06      	ldr	r3, [pc, #24]	; (8000564 <RCC_AHB1PeriphClockCmd+0x3c>)
 800054c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	43db      	mvns	r3, r3
 8000552:	4013      	ands	r3, r2
 8000554:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000556:	bf00      	nop
 8000558:	370c      	adds	r7, #12
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	40023800 	.word	0x40023800

08000568 <TM_Delay_Init>:
#include "delay.h"

uint32_t multiplier;

void TM_Delay_Init(void) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
    RCC_ClocksTypeDef RCC_Clocks;

    /* Get system clocks */
    RCC_GetClocksFreq(&RCC_Clocks);
 800056e:	463b      	mov	r3, r7
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff fedf 	bl	8000334 <RCC_GetClocksFreq>

    /* While loop takes 4 cycles */
    /* For 1 us delay, we need to divide with 4M */
    printf("Freq: %d", RCC_Clocks.HCLK_Frequency);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	4619      	mov	r1, r3
 800057a:	4807      	ldr	r0, [pc, #28]	; (8000598 <TM_Delay_Init+0x30>)
 800057c:	f000 fa80 	bl	8000a80 <iprintf>
    multiplier = RCC_Clocks.HCLK_Frequency / 4000000;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4a06      	ldr	r2, [pc, #24]	; (800059c <TM_Delay_Init+0x34>)
 8000584:	fba2 2303 	umull	r2, r3, r2, r3
 8000588:	0d1b      	lsrs	r3, r3, #20
 800058a:	4a05      	ldr	r2, [pc, #20]	; (80005a0 <TM_Delay_Init+0x38>)
 800058c:	6013      	str	r3, [r2, #0]
}
 800058e:	bf00      	nop
 8000590:	3710      	adds	r7, #16
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	08000b74 	.word	0x08000b74
 800059c:	431bde83 	.word	0x431bde83
 80005a0:	2000002c 	.word	0x2000002c

080005a4 <TM_DelayMillis>:
    micros = micros * multiplier - 10;
    /* 4 cycles for one loop */
    while (micros--);
}

void TM_DelayMillis(uint32_t millis) {
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
    /* Multiply millis with multipler */
    /* Substract 10 */
    millis = 1000 * millis * multiplier - 10;
 80005ac:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <TM_DelayMillis+0x38>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	fb02 f303 	mul.w	r3, r2, r3
 80005b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005ba:	fb02 f303 	mul.w	r3, r2, r3
 80005be:	3b0a      	subs	r3, #10
 80005c0:	607b      	str	r3, [r7, #4]
    /* 4 cycles for one loop */
    while (millis--);
 80005c2:	bf00      	nop
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	1e5a      	subs	r2, r3, #1
 80005c8:	607a      	str	r2, [r7, #4]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d1fa      	bne.n	80005c4 <TM_DelayMillis+0x20>
}
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	2000002c 	.word	0x2000002c

080005e0 <main>:

GPIO_InitTypeDef  GPIO_InitStructure;

uint32_t multiplier;

int main() {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0

	SystemInit();
 80005e4:	f000 f8a0 	bl	8000728 <SystemInit>

	TM_Delay_Init();
 80005e8:	f7ff ffbe 	bl	8000568 <TM_Delay_Init>

	/* GPIOG Peripheral clock enable */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80005ec:	2101      	movs	r1, #1
 80005ee:	2002      	movs	r0, #2
 80005f0:	f7ff ff9a 	bl	8000528 <RCC_AHB1PeriphClockCmd>

	/* Configure PG6 and PG8 in output pushpull mode */
	GPIO_InitStructure.GPIO_Pin = LED_PIN;
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <main+0x60>)
 80005f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005fa:	601a      	str	r2, [r3, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80005fc:	4b10      	ldr	r3, [pc, #64]	; (8000640 <main+0x60>)
 80005fe:	2201      	movs	r2, #1
 8000600:	711a      	strb	r2, [r3, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <main+0x60>)
 8000604:	2200      	movs	r2, #0
 8000606:	719a      	strb	r2, [r3, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000608:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <main+0x60>)
 800060a:	2200      	movs	r2, #0
 800060c:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800060e:	490c      	ldr	r1, [pc, #48]	; (8000640 <main+0x60>)
 8000610:	480c      	ldr	r0, [pc, #48]	; (8000644 <main+0x64>)
 8000612:	f7ff fe01 	bl	8000218 <GPIO_Init>

	printf("Ovo je zaista kul stvar");
 8000616:	480c      	ldr	r0, [pc, #48]	; (8000648 <main+0x68>)
 8000618:	f000 fa32 	bl	8000a80 <iprintf>
	while (1)
	{
	// Set PG6 and PG8
	GPIOB->BSRRL = LED_PIN;
 800061c:	4b09      	ldr	r3, [pc, #36]	; (8000644 <main+0x64>)
 800061e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000622:	831a      	strh	r2, [r3, #24]

	TM_DelayMillis(5000);
 8000624:	f241 3088 	movw	r0, #5000	; 0x1388
 8000628:	f7ff ffbc 	bl	80005a4 <TM_DelayMillis>

	GPIOB->BSRRH = LED_PIN;
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <main+0x64>)
 800062e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000632:	835a      	strh	r2, [r3, #26]

	TM_DelayMillis(5000);
 8000634:	f241 3088 	movw	r0, #5000	; 0x1388
 8000638:	f7ff ffb4 	bl	80005a4 <TM_DelayMillis>
	GPIOB->BSRRL = LED_PIN;
 800063c:	e7ee      	b.n	800061c <main+0x3c>
 800063e:	bf00      	nop
 8000640:	20000030 	.word	0x20000030
 8000644:	40020400 	.word	0x40020400
 8000648:	08000b80 	.word	0x08000b80

0800064c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 800064c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000684 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000650:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000652:	e003      	b.n	800065c <LoopCopyDataInit>

08000654 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000656:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000658:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800065a:	3104      	adds	r1, #4

0800065c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800065c:	480b      	ldr	r0, [pc, #44]	; (800068c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000660:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000662:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000664:	d3f6      	bcc.n	8000654 <CopyDataInit>
  ldr  r2, =_sbss
 8000666:	4a0b      	ldr	r2, [pc, #44]	; (8000694 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000668:	e002      	b.n	8000670 <LoopFillZerobss>

0800066a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800066a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800066c:	f842 3b04 	str.w	r3, [r2], #4

08000670 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000672:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000674:	d3f9      	bcc.n	800066a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000676:	f000 f857 	bl	8000728 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800067a:	f000 fa4b 	bl	8000b14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800067e:	f7ff ffaf 	bl	80005e0 <main>
  bx  lr    
 8000682:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000684:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000688:	08000ba0 	.word	0x08000ba0
  ldr  r0, =_sdata
 800068c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000690:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000694:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000698:	20000038 	.word	0x20000038

0800069c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800069c:	e7fe      	b.n	800069c <ADC_IRQHandler>

0800069e <ITM_SendChar>:
    \param [in]     ch  Character to transmit.

    \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800069e:	b480      	push	{r7}
 80006a0:	b083      	sub	sp, #12
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
  if ((ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 80006a6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006aa:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d012      	beq.n	80006dc <ITM_SendChar+0x3e>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
 80006b6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006ba:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80006be:	f003 0301 	and.w	r3, r3, #1
  if ((ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d00a      	beq.n	80006dc <ITM_SendChar+0x3e>
  {
    while (ITM->PORT[0].u32 == 0);
 80006c6:	bf00      	nop
 80006c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d0fa      	beq.n	80006c8 <ITM_SendChar+0x2a>
    ITM->PORT[0].u8 = (uint8_t) ch;
 80006d2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006d6:	687a      	ldr	r2, [r7, #4]
 80006d8:	b2d2      	uxtb	r2, r2
 80006da:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80006dc:	687b      	ldr	r3, [r7, #4]
}
 80006de:	4618      	mov	r0, r3
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr

080006ea <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b086      	sub	sp, #24
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	60f8      	str	r0, [r7, #12]
 80006f2:	60b9      	str	r1, [r7, #8]
 80006f4:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	/* return len; */
	int i = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++)
 80006fa:	2300      	movs	r3, #0
 80006fc:	617b      	str	r3, [r7, #20]
 80006fe:	e009      	b.n	8000714 <_write+0x2a>
	{
		ITM_SendChar(*ptr++);
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	1c5a      	adds	r2, r3, #1
 8000704:	60ba      	str	r2, [r7, #8]
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ffc8 	bl	800069e <ITM_SendChar>
	for(i=0;i<len;i++)
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	3301      	adds	r3, #1
 8000712:	617b      	str	r3, [r7, #20]
 8000714:	697a      	ldr	r2, [r7, #20]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	429a      	cmp	r2, r3
 800071a:	dbf1      	blt.n	8000700 <_write+0x16>
	}
	
	return len;
 800071c:	687b      	ldr	r3, [r7, #4]
}
 800071e:	4618      	mov	r0, r3
 8000720:	3718      	adds	r7, #24
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800072c:	4a16      	ldr	r2, [pc, #88]	; (8000788 <SystemInit+0x60>)
 800072e:	4b16      	ldr	r3, [pc, #88]	; (8000788 <SystemInit+0x60>)
 8000730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000734:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000738:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800073c:	4a13      	ldr	r2, [pc, #76]	; (800078c <SystemInit+0x64>)
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <SystemInit+0x64>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f043 0301 	orr.w	r3, r3, #1
 8000746:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000748:	4b10      	ldr	r3, [pc, #64]	; (800078c <SystemInit+0x64>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800074e:	4a0f      	ldr	r2, [pc, #60]	; (800078c <SystemInit+0x64>)
 8000750:	4b0e      	ldr	r3, [pc, #56]	; (800078c <SystemInit+0x64>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800075c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <SystemInit+0x64>)
 8000760:	4a0b      	ldr	r2, [pc, #44]	; (8000790 <SystemInit+0x68>)
 8000762:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000764:	4a09      	ldr	r2, [pc, #36]	; (800078c <SystemInit+0x64>)
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <SystemInit+0x64>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800076e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <SystemInit+0x64>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000776:	4b04      	ldr	r3, [pc, #16]	; (8000788 <SystemInit+0x60>)
 8000778:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800077c:	609a      	str	r2, [r3, #8]
#endif
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	e000ed00 	.word	0xe000ed00
 800078c:	40023800 	.word	0x40023800
 8000790:	24003010 	.word	0x24003010

08000794 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8000794:	b480      	push	{r7}
 8000796:	b087      	sub	sp, #28
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
	int div = 1;
 80007a0:	2301      	movs	r3, #1
 80007a2:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80007a4:	e004      	b.n	80007b0 <ts_itoa+0x1c>
		div *= base;
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	fb02 f303 	mul.w	r3, r2, r3
 80007ae:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	68ba      	ldr	r2, [r7, #8]
 80007b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d2f3      	bcs.n	80007a6 <ts_itoa+0x12>

	while (div != 0)
 80007be:	e029      	b.n	8000814 <ts_itoa+0x80>
	{
		int num = d/div;
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	68ba      	ldr	r2, [r7, #8]
 80007c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c8:	613b      	str	r3, [r7, #16]
		d = d%div;
 80007ca:	697a      	ldr	r2, [r7, #20]
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80007d2:	fb02 f201 	mul.w	r2, r2, r1
 80007d6:	1a9b      	subs	r3, r3, r2
 80007d8:	60bb      	str	r3, [r7, #8]
		div /= base;
 80007da:	697a      	ldr	r2, [r7, #20]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	fb92 f3f3 	sdiv	r3, r2, r3
 80007e2:	617b      	str	r3, [r7, #20]
		if (num > 9)
 80007e4:	693b      	ldr	r3, [r7, #16]
 80007e6:	2b09      	cmp	r3, #9
 80007e8:	dd0a      	ble.n	8000800 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	1c59      	adds	r1, r3, #1
 80007f0:	68fa      	ldr	r2, [r7, #12]
 80007f2:	6011      	str	r1, [r2, #0]
 80007f4:	693a      	ldr	r2, [r7, #16]
 80007f6:	b2d2      	uxtb	r2, r2
 80007f8:	3237      	adds	r2, #55	; 0x37
 80007fa:	b2d2      	uxtb	r2, r2
 80007fc:	701a      	strb	r2, [r3, #0]
 80007fe:	e009      	b.n	8000814 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	1c59      	adds	r1, r3, #1
 8000806:	68fa      	ldr	r2, [r7, #12]
 8000808:	6011      	str	r1, [r2, #0]
 800080a:	693a      	ldr	r2, [r7, #16]
 800080c:	b2d2      	uxtb	r2, r2
 800080e:	3230      	adds	r2, #48	; 0x30
 8000810:	b2d2      	uxtb	r2, r2
 8000812:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d1d2      	bne.n	80007c0 <ts_itoa+0x2c>
	}
}
 800081a:	bf00      	nop
 800081c:	371c      	adds	r7, #28
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b088      	sub	sp, #32
 800082a:	af00      	add	r7, sp, #0
 800082c:	60f8      	str	r0, [r7, #12]
 800082e:	60b9      	str	r1, [r7, #8]
 8000830:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8000836:	e07d      	b.n	8000934 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b25      	cmp	r3, #37	; 0x25
 800083e:	d171      	bne.n	8000924 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	3301      	adds	r3, #1
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b64      	cmp	r3, #100	; 0x64
 800084c:	d01e      	beq.n	800088c <ts_formatstring+0x66>
 800084e:	2b64      	cmp	r3, #100	; 0x64
 8000850:	dc06      	bgt.n	8000860 <ts_formatstring+0x3a>
 8000852:	2b58      	cmp	r3, #88	; 0x58
 8000854:	d050      	beq.n	80008f8 <ts_formatstring+0xd2>
 8000856:	2b63      	cmp	r3, #99	; 0x63
 8000858:	d00e      	beq.n	8000878 <ts_formatstring+0x52>
 800085a:	2b25      	cmp	r3, #37	; 0x25
 800085c:	d058      	beq.n	8000910 <ts_formatstring+0xea>
 800085e:	e05d      	b.n	800091c <ts_formatstring+0xf6>
 8000860:	2b73      	cmp	r3, #115	; 0x73
 8000862:	d02b      	beq.n	80008bc <ts_formatstring+0x96>
 8000864:	2b73      	cmp	r3, #115	; 0x73
 8000866:	dc02      	bgt.n	800086e <ts_formatstring+0x48>
 8000868:	2b69      	cmp	r3, #105	; 0x69
 800086a:	d00f      	beq.n	800088c <ts_formatstring+0x66>
 800086c:	e056      	b.n	800091c <ts_formatstring+0xf6>
 800086e:	2b75      	cmp	r3, #117	; 0x75
 8000870:	d037      	beq.n	80008e2 <ts_formatstring+0xbc>
 8000872:	2b78      	cmp	r3, #120	; 0x78
 8000874:	d040      	beq.n	80008f8 <ts_formatstring+0xd2>
 8000876:	e051      	b.n	800091c <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	1c5a      	adds	r2, r3, #1
 800087c:	60fa      	str	r2, [r7, #12]
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	1d11      	adds	r1, r2, #4
 8000882:	6079      	str	r1, [r7, #4]
 8000884:	6812      	ldr	r2, [r2, #0]
 8000886:	b2d2      	uxtb	r2, r2
 8000888:	701a      	strb	r2, [r3, #0]
				break;
 800088a:	e047      	b.n	800091c <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	1d1a      	adds	r2, r3, #4
 8000890:	607a      	str	r2, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	2b00      	cmp	r3, #0
 800089a:	da07      	bge.n	80008ac <ts_formatstring+0x86>
					{
						val *= -1;
 800089c:	69fb      	ldr	r3, [r7, #28]
 800089e:	425b      	negs	r3, r3
 80008a0:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	1c5a      	adds	r2, r3, #1
 80008a6:	60fa      	str	r2, [r7, #12]
 80008a8:	222d      	movs	r2, #45	; 0x2d
 80008aa:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 80008ac:	69f9      	ldr	r1, [r7, #28]
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	220a      	movs	r2, #10
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff ff6d 	bl	8000794 <ts_itoa>
				}
				break;
 80008ba:	e02f      	b.n	800091c <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	1d1a      	adds	r2, r3, #4
 80008c0:	607a      	str	r2, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	61bb      	str	r3, [r7, #24]
					while (*arg)
 80008c6:	e007      	b.n	80008d8 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	1c5a      	adds	r2, r3, #1
 80008cc:	60fa      	str	r2, [r7, #12]
 80008ce:	69ba      	ldr	r2, [r7, #24]
 80008d0:	1c51      	adds	r1, r2, #1
 80008d2:	61b9      	str	r1, [r7, #24]
 80008d4:	7812      	ldrb	r2, [r2, #0]
 80008d6:	701a      	strb	r2, [r3, #0]
					while (*arg)
 80008d8:	69bb      	ldr	r3, [r7, #24]
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d1f3      	bne.n	80008c8 <ts_formatstring+0xa2>
					}
				}
				break;
 80008e0:	e01c      	b.n	800091c <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	1d1a      	adds	r2, r3, #4
 80008e6:	607a      	str	r2, [r7, #4]
 80008e8:	6819      	ldr	r1, [r3, #0]
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	220a      	movs	r2, #10
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff ff4f 	bl	8000794 <ts_itoa>
				break;
 80008f6:	e011      	b.n	800091c <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	1d1a      	adds	r2, r3, #4
 80008fc:	607a      	str	r2, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4619      	mov	r1, r3
 8000902:	f107 030c 	add.w	r3, r7, #12
 8000906:	2210      	movs	r2, #16
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ff43 	bl	8000794 <ts_itoa>
				break;
 800090e:	e005      	b.n	800091c <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	1c5a      	adds	r2, r3, #1
 8000914:	60fa      	str	r2, [r7, #12]
 8000916:	2225      	movs	r2, #37	; 0x25
 8000918:	701a      	strb	r2, [r3, #0]
				  break;
 800091a:	bf00      	nop
			}
			fmt++;
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	3301      	adds	r3, #1
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	e007      	b.n	8000934 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	1c5a      	adds	r2, r3, #1
 8000928:	60fa      	str	r2, [r7, #12]
 800092a:	68ba      	ldr	r2, [r7, #8]
 800092c:	1c51      	adds	r1, r2, #1
 800092e:	60b9      	str	r1, [r7, #8]
 8000930:	7812      	ldrb	r2, [r2, #0]
 8000932:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	f47f af7d 	bne.w	8000838 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	461a      	mov	r2, r3
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	1ad3      	subs	r3, r2, r3
}
 800094c:	4618      	mov	r0, r3
 800094e:	3720      	adds	r7, #32
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	6039      	str	r1, [r7, #0]
	int length = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 8000962:	e081      	b.n	8000a68 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b25      	cmp	r3, #37	; 0x25
 800096a:	d177      	bne.n	8000a5c <ts_formatlength+0x108>
		{
			++fmt;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3301      	adds	r3, #1
 8000970:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	3b58      	subs	r3, #88	; 0x58
 8000978:	2b20      	cmp	r3, #32
 800097a:	d86a      	bhi.n	8000a52 <ts_formatlength+0xfe>
 800097c:	a201      	add	r2, pc, #4	; (adr r2, 8000984 <ts_formatlength+0x30>)
 800097e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000982:	bf00      	nop
 8000984:	08000a45 	.word	0x08000a45
 8000988:	08000a53 	.word	0x08000a53
 800098c:	08000a53 	.word	0x08000a53
 8000990:	08000a53 	.word	0x08000a53
 8000994:	08000a53 	.word	0x08000a53
 8000998:	08000a53 	.word	0x08000a53
 800099c:	08000a53 	.word	0x08000a53
 80009a0:	08000a53 	.word	0x08000a53
 80009a4:	08000a53 	.word	0x08000a53
 80009a8:	08000a53 	.word	0x08000a53
 80009ac:	08000a53 	.word	0x08000a53
 80009b0:	08000a09 	.word	0x08000a09
 80009b4:	08000a17 	.word	0x08000a17
 80009b8:	08000a53 	.word	0x08000a53
 80009bc:	08000a53 	.word	0x08000a53
 80009c0:	08000a53 	.word	0x08000a53
 80009c4:	08000a53 	.word	0x08000a53
 80009c8:	08000a17 	.word	0x08000a17
 80009cc:	08000a53 	.word	0x08000a53
 80009d0:	08000a53 	.word	0x08000a53
 80009d4:	08000a53 	.word	0x08000a53
 80009d8:	08000a53 	.word	0x08000a53
 80009dc:	08000a53 	.word	0x08000a53
 80009e0:	08000a53 	.word	0x08000a53
 80009e4:	08000a53 	.word	0x08000a53
 80009e8:	08000a53 	.word	0x08000a53
 80009ec:	08000a53 	.word	0x08000a53
 80009f0:	08000a25 	.word	0x08000a25
 80009f4:	08000a53 	.word	0x08000a53
 80009f8:	08000a17 	.word	0x08000a17
 80009fc:	08000a53 	.word	0x08000a53
 8000a00:	08000a53 	.word	0x08000a53
 8000a04:	08000a45 	.word	0x08000a45
			{
			  case 'c':
		  		  va_arg(va, int);
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	3304      	adds	r3, #4
 8000a0c:	603b      	str	r3, [r7, #0]
				  ++length;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	3301      	adds	r3, #1
 8000a12:	60fb      	str	r3, [r7, #12]
				  break;
 8000a14:	e025      	b.n	8000a62 <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	330b      	adds	r3, #11
 8000a1a:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	3304      	adds	r3, #4
 8000a20:	603b      	str	r3, [r7, #0]
				  break;
 8000a22:	e01e      	b.n	8000a62 <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	1d1a      	adds	r2, r3, #4
 8000a28:	603a      	str	r2, [r7, #0]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 8000a2e:	e002      	b.n	8000a36 <ts_formatlength+0xe2>
			  			  ++length;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	3301      	adds	r3, #1
 8000a34:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	1c5a      	adds	r2, r3, #1
 8000a3a:	60ba      	str	r2, [r7, #8]
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d1f6      	bne.n	8000a30 <ts_formatlength+0xdc>
			  	  }
				  break;
 8000a42:	e00e      	b.n	8000a62 <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	3308      	adds	r3, #8
 8000a48:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	3304      	adds	r3, #4
 8000a4e:	603b      	str	r3, [r7, #0]
				  break;
 8000a50:	e007      	b.n	8000a62 <ts_formatlength+0x10e>
			  default:
				  ++length;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	3301      	adds	r3, #1
 8000a56:	60fb      	str	r3, [r7, #12]
				  break;
 8000a58:	bf00      	nop
 8000a5a:	e002      	b.n	8000a62 <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	3301      	adds	r3, #1
 8000a66:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	f47f af79 	bne.w	8000964 <ts_formatlength+0x10>
	}
	return length;
 8000a72:	68fb      	ldr	r3, [r7, #12]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 8000a80:	b40f      	push	{r0, r1, r2, r3}
 8000a82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
	int length = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 8000a8e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a92:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 8000a94:	6839      	ldr	r1, [r7, #0]
 8000a96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a98:	f7ff ff5c 	bl	8000954 <ts_formatlength>
 8000a9c:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 8000a9e:	466b      	mov	r3, sp
 8000aa0:	461e      	mov	r6, r3
		char buf[length];
 8000aa2:	68f9      	ldr	r1, [r7, #12]
 8000aa4:	1e4b      	subs	r3, r1, #1
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	461a      	mov	r2, r3
 8000aac:	f04f 0300 	mov.w	r3, #0
 8000ab0:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8000ab4:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8000ab8:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8000abc:	460b      	mov	r3, r1
 8000abe:	461a      	mov	r2, r3
 8000ac0:	f04f 0300 	mov.w	r3, #0
 8000ac4:	00dd      	lsls	r5, r3, #3
 8000ac6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8000aca:	00d4      	lsls	r4, r2, #3
 8000acc:	460b      	mov	r3, r1
 8000ace:	3307      	adds	r3, #7
 8000ad0:	08db      	lsrs	r3, r3, #3
 8000ad2:	00db      	lsls	r3, r3, #3
 8000ad4:	ebad 0d03 	sub.w	sp, sp, r3
 8000ad8:	466b      	mov	r3, sp
 8000ada:	3300      	adds	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 8000ade:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ae2:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	683a      	ldr	r2, [r7, #0]
 8000ae8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fe9b 	bl	8000826 <ts_formatstring>
 8000af0:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	68fa      	ldr	r2, [r7, #12]
 8000af6:	4619      	mov	r1, r3
 8000af8:	2001      	movs	r0, #1
 8000afa:	f7ff fdf6 	bl	80006ea <_write>
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 8000b02:	68fb      	ldr	r3, [r7, #12]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b0e:	b004      	add	sp, #16
 8000b10:	4770      	bx	lr
	...

08000b14 <__libc_init_array>:
 8000b14:	b570      	push	{r4, r5, r6, lr}
 8000b16:	4e0d      	ldr	r6, [pc, #52]	; (8000b4c <__libc_init_array+0x38>)
 8000b18:	4c0d      	ldr	r4, [pc, #52]	; (8000b50 <__libc_init_array+0x3c>)
 8000b1a:	1ba4      	subs	r4, r4, r6
 8000b1c:	10a4      	asrs	r4, r4, #2
 8000b1e:	2500      	movs	r5, #0
 8000b20:	42a5      	cmp	r5, r4
 8000b22:	d109      	bne.n	8000b38 <__libc_init_array+0x24>
 8000b24:	4e0b      	ldr	r6, [pc, #44]	; (8000b54 <__libc_init_array+0x40>)
 8000b26:	4c0c      	ldr	r4, [pc, #48]	; (8000b58 <__libc_init_array+0x44>)
 8000b28:	f000 f818 	bl	8000b5c <_init>
 8000b2c:	1ba4      	subs	r4, r4, r6
 8000b2e:	10a4      	asrs	r4, r4, #2
 8000b30:	2500      	movs	r5, #0
 8000b32:	42a5      	cmp	r5, r4
 8000b34:	d105      	bne.n	8000b42 <__libc_init_array+0x2e>
 8000b36:	bd70      	pop	{r4, r5, r6, pc}
 8000b38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b3c:	4798      	blx	r3
 8000b3e:	3501      	adds	r5, #1
 8000b40:	e7ee      	b.n	8000b20 <__libc_init_array+0xc>
 8000b42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b46:	4798      	blx	r3
 8000b48:	3501      	adds	r5, #1
 8000b4a:	e7f2      	b.n	8000b32 <__libc_init_array+0x1e>
 8000b4c:	08000b98 	.word	0x08000b98
 8000b50:	08000b98 	.word	0x08000b98
 8000b54:	08000b98 	.word	0x08000b98
 8000b58:	08000b9c 	.word	0x08000b9c

08000b5c <_init>:
 8000b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b5e:	bf00      	nop
 8000b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b62:	bc08      	pop	{r3}
 8000b64:	469e      	mov	lr, r3
 8000b66:	4770      	bx	lr

08000b68 <_fini>:
 8000b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b6a:	bf00      	nop
 8000b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b6e:	bc08      	pop	{r3}
 8000b70:	469e      	mov	lr, r3
 8000b72:	4770      	bx	lr
