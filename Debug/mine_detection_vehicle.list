
mine_detection_vehicle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e80  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001058  08001058  00011058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001074  08001074  00011074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001078  08001078  00011078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  0800107c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000028  20000010  0800108c  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000038  0800108c  00020038  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00005f33  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000f9f  00000000  00000000  00025f73  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000570  00000000  00000000  00026f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004e8  00000000  00000000  00027488  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001e27  00000000  00000000  00027970  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000208f  00000000  00000000  00029797  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002b826  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001720  00000000  00000000  0002b8a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08001040 	.word	0x08001040

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08001040 	.word	0x08001040

08000218 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000218:	b480      	push	{r7}
 800021a:	b087      	sub	sp, #28
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000222:	2300      	movs	r3, #0
 8000224:	617b      	str	r3, [r7, #20]
 8000226:	2300      	movs	r3, #0
 8000228:	613b      	str	r3, [r7, #16]
 800022a:	2300      	movs	r3, #0
 800022c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800022e:	2300      	movs	r3, #0
 8000230:	617b      	str	r3, [r7, #20]
 8000232:	e076      	b.n	8000322 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000234:	2201      	movs	r2, #1
 8000236:	697b      	ldr	r3, [r7, #20]
 8000238:	fa02 f303 	lsl.w	r3, r2, r3
 800023c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	693b      	ldr	r3, [r7, #16]
 8000244:	4013      	ands	r3, r2
 8000246:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000248:	68fa      	ldr	r2, [r7, #12]
 800024a:	693b      	ldr	r3, [r7, #16]
 800024c:	429a      	cmp	r2, r3
 800024e:	d165      	bne.n	800031c <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	681a      	ldr	r2, [r3, #0]
 8000254:	697b      	ldr	r3, [r7, #20]
 8000256:	005b      	lsls	r3, r3, #1
 8000258:	2103      	movs	r1, #3
 800025a:	fa01 f303 	lsl.w	r3, r1, r3
 800025e:	43db      	mvns	r3, r3
 8000260:	401a      	ands	r2, r3
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	681a      	ldr	r2, [r3, #0]
 800026a:	683b      	ldr	r3, [r7, #0]
 800026c:	791b      	ldrb	r3, [r3, #4]
 800026e:	4619      	mov	r1, r3
 8000270:	697b      	ldr	r3, [r7, #20]
 8000272:	005b      	lsls	r3, r3, #1
 8000274:	fa01 f303 	lsl.w	r3, r1, r3
 8000278:	431a      	orrs	r2, r3
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	791b      	ldrb	r3, [r3, #4]
 8000282:	2b01      	cmp	r3, #1
 8000284:	d003      	beq.n	800028e <GPIO_Init+0x76>
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	791b      	ldrb	r3, [r3, #4]
 800028a:	2b02      	cmp	r3, #2
 800028c:	d12e      	bne.n	80002ec <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	689a      	ldr	r2, [r3, #8]
 8000292:	697b      	ldr	r3, [r7, #20]
 8000294:	005b      	lsls	r3, r3, #1
 8000296:	2103      	movs	r1, #3
 8000298:	fa01 f303 	lsl.w	r3, r1, r3
 800029c:	43db      	mvns	r3, r3
 800029e:	401a      	ands	r2, r3
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	689a      	ldr	r2, [r3, #8]
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	795b      	ldrb	r3, [r3, #5]
 80002ac:	4619      	mov	r1, r3
 80002ae:	697b      	ldr	r3, [r7, #20]
 80002b0:	005b      	lsls	r3, r3, #1
 80002b2:	fa01 f303 	lsl.w	r3, r1, r3
 80002b6:	431a      	orrs	r2, r3
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	685a      	ldr	r2, [r3, #4]
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	b29b      	uxth	r3, r3
 80002c4:	4619      	mov	r1, r3
 80002c6:	2301      	movs	r3, #1
 80002c8:	408b      	lsls	r3, r1
 80002ca:	43db      	mvns	r3, r3
 80002cc:	401a      	ands	r2, r3
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	685b      	ldr	r3, [r3, #4]
 80002d6:	683a      	ldr	r2, [r7, #0]
 80002d8:	7992      	ldrb	r2, [r2, #6]
 80002da:	4611      	mov	r1, r2
 80002dc:	697a      	ldr	r2, [r7, #20]
 80002de:	b292      	uxth	r2, r2
 80002e0:	fa01 f202 	lsl.w	r2, r1, r2
 80002e4:	b292      	uxth	r2, r2
 80002e6:	431a      	orrs	r2, r3
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	68da      	ldr	r2, [r3, #12]
 80002f0:	697b      	ldr	r3, [r7, #20]
 80002f2:	b29b      	uxth	r3, r3
 80002f4:	005b      	lsls	r3, r3, #1
 80002f6:	2103      	movs	r1, #3
 80002f8:	fa01 f303 	lsl.w	r3, r1, r3
 80002fc:	43db      	mvns	r3, r3
 80002fe:	401a      	ands	r2, r3
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	68da      	ldr	r2, [r3, #12]
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	79db      	ldrb	r3, [r3, #7]
 800030c:	4619      	mov	r1, r3
 800030e:	697b      	ldr	r3, [r7, #20]
 8000310:	005b      	lsls	r3, r3, #1
 8000312:	fa01 f303 	lsl.w	r3, r1, r3
 8000316:	431a      	orrs	r2, r3
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800031c:	697b      	ldr	r3, [r7, #20]
 800031e:	3301      	adds	r3, #1
 8000320:	617b      	str	r3, [r7, #20]
 8000322:	697b      	ldr	r3, [r7, #20]
 8000324:	2b0f      	cmp	r3, #15
 8000326:	d985      	bls.n	8000234 <GPIO_Init+0x1c>
    }
  }
}
 8000328:	bf00      	nop
 800032a:	371c      	adds	r7, #28
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr

08000334 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000334:	b480      	push	{r7}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	460b      	mov	r3, r1
 800033e:	807b      	strh	r3, [r7, #2]
 8000340:	4613      	mov	r3, r2
 8000342:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000344:	2300      	movs	r3, #0
 8000346:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000348:	2300      	movs	r3, #0
 800034a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800034c:	787a      	ldrb	r2, [r7, #1]
 800034e:	887b      	ldrh	r3, [r7, #2]
 8000350:	f003 0307 	and.w	r3, r3, #7
 8000354:	009b      	lsls	r3, r3, #2
 8000356:	fa02 f303 	lsl.w	r3, r2, r3
 800035a:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800035c:	887b      	ldrh	r3, [r7, #2]
 800035e:	08db      	lsrs	r3, r3, #3
 8000360:	b29b      	uxth	r3, r3
 8000362:	4618      	mov	r0, r3
 8000364:	887b      	ldrh	r3, [r7, #2]
 8000366:	08db      	lsrs	r3, r3, #3
 8000368:	b29b      	uxth	r3, r3
 800036a:	461a      	mov	r2, r3
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	3208      	adds	r2, #8
 8000370:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000374:	887b      	ldrh	r3, [r7, #2]
 8000376:	f003 0307 	and.w	r3, r3, #7
 800037a:	009b      	lsls	r3, r3, #2
 800037c:	210f      	movs	r1, #15
 800037e:	fa01 f303 	lsl.w	r3, r1, r3
 8000382:	43db      	mvns	r3, r3
 8000384:	ea02 0103 	and.w	r1, r2, r3
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	f100 0208 	add.w	r2, r0, #8
 800038e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000392:	887b      	ldrh	r3, [r7, #2]
 8000394:	08db      	lsrs	r3, r3, #3
 8000396:	b29b      	uxth	r3, r3
 8000398:	461a      	mov	r2, r3
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	3208      	adds	r2, #8
 800039e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	4313      	orrs	r3, r2
 80003a6:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80003a8:	887b      	ldrh	r3, [r7, #2]
 80003aa:	08db      	lsrs	r3, r3, #3
 80003ac:	b29b      	uxth	r3, r3
 80003ae:	461a      	mov	r2, r3
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	3208      	adds	r2, #8
 80003b4:	68b9      	ldr	r1, [r7, #8]
 80003b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80003ba:	bf00      	nop
 80003bc:	3714      	adds	r7, #20
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
	...

080003c8 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b08b      	sub	sp, #44	; 0x2c
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80003d0:	2300      	movs	r3, #0
 80003d2:	623b      	str	r3, [r7, #32]
 80003d4:	2300      	movs	r3, #0
 80003d6:	61fb      	str	r3, [r7, #28]
 80003d8:	2300      	movs	r3, #0
 80003da:	627b      	str	r3, [r7, #36]	; 0x24
 80003dc:	2302      	movs	r3, #2
 80003de:	61bb      	str	r3, [r7, #24]
 80003e0:	2300      	movs	r3, #0
 80003e2:	617b      	str	r3, [r7, #20]
 80003e4:	2302      	movs	r3, #2
 80003e6:	613b      	str	r3, [r7, #16]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
 80003e8:	2302      	movs	r3, #2
 80003ea:	60fb      	str	r3, [r7, #12]
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80003ec:	4b6f      	ldr	r3, [pc, #444]	; (80005ac <RCC_GetClocksFreq+0x1e4>)
 80003ee:	689b      	ldr	r3, [r3, #8]
 80003f0:	f003 030c 	and.w	r3, r3, #12
 80003f4:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 80003f6:	6a3b      	ldr	r3, [r7, #32]
 80003f8:	2b0c      	cmp	r3, #12
 80003fa:	f200 8091 	bhi.w	8000520 <RCC_GetClocksFreq+0x158>
 80003fe:	a201      	add	r2, pc, #4	; (adr r2, 8000404 <RCC_GetClocksFreq+0x3c>)
 8000400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000404:	08000439 	.word	0x08000439
 8000408:	08000521 	.word	0x08000521
 800040c:	08000521 	.word	0x08000521
 8000410:	08000521 	.word	0x08000521
 8000414:	08000441 	.word	0x08000441
 8000418:	08000521 	.word	0x08000521
 800041c:	08000521 	.word	0x08000521
 8000420:	08000521 	.word	0x08000521
 8000424:	08000449 	.word	0x08000449
 8000428:	08000521 	.word	0x08000521
 800042c:	08000521 	.word	0x08000521
 8000430:	08000521 	.word	0x08000521
 8000434:	080004b5 	.word	0x080004b5
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	4a5d      	ldr	r2, [pc, #372]	; (80005b0 <RCC_GetClocksFreq+0x1e8>)
 800043c:	601a      	str	r2, [r3, #0]
    break;
 800043e:	e073      	b.n	8000528 <RCC_GetClocksFreq+0x160>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4a5c      	ldr	r2, [pc, #368]	; (80005b4 <RCC_GetClocksFreq+0x1ec>)
 8000444:	601a      	str	r2, [r3, #0]
    break;
 8000446:	e06f      	b.n	8000528 <RCC_GetClocksFreq+0x160>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000448:	4b58      	ldr	r3, [pc, #352]	; (80005ac <RCC_GetClocksFreq+0x1e4>)
 800044a:	685b      	ldr	r3, [r3, #4]
 800044c:	0d9b      	lsrs	r3, r3, #22
 800044e:	f003 0301 	and.w	r3, r3, #1
 8000452:	617b      	str	r3, [r7, #20]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000454:	4b55      	ldr	r3, [pc, #340]	; (80005ac <RCC_GetClocksFreq+0x1e4>)
 8000456:	685b      	ldr	r3, [r3, #4]
 8000458:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800045c:	613b      	str	r3, [r7, #16]
    
    if (pllsource != 0)
 800045e:	697b      	ldr	r3, [r7, #20]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d00c      	beq.n	800047e <RCC_GetClocksFreq+0xb6>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000464:	4a53      	ldr	r2, [pc, #332]	; (80005b4 <RCC_GetClocksFreq+0x1ec>)
 8000466:	693b      	ldr	r3, [r7, #16]
 8000468:	fbb2 f3f3 	udiv	r3, r2, r3
 800046c:	4a4f      	ldr	r2, [pc, #316]	; (80005ac <RCC_GetClocksFreq+0x1e4>)
 800046e:	6852      	ldr	r2, [r2, #4]
 8000470:	0992      	lsrs	r2, r2, #6
 8000472:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000476:	fb02 f303 	mul.w	r3, r2, r3
 800047a:	627b      	str	r3, [r7, #36]	; 0x24
 800047c:	e00b      	b.n	8000496 <RCC_GetClocksFreq+0xce>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800047e:	4a4c      	ldr	r2, [pc, #304]	; (80005b0 <RCC_GetClocksFreq+0x1e8>)
 8000480:	693b      	ldr	r3, [r7, #16]
 8000482:	fbb2 f3f3 	udiv	r3, r2, r3
 8000486:	4a49      	ldr	r2, [pc, #292]	; (80005ac <RCC_GetClocksFreq+0x1e4>)
 8000488:	6852      	ldr	r2, [r2, #4]
 800048a:	0992      	lsrs	r2, r2, #6
 800048c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000490:	fb02 f303 	mul.w	r3, r2, r3
 8000494:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000496:	4b45      	ldr	r3, [pc, #276]	; (80005ac <RCC_GetClocksFreq+0x1e4>)
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	0c1b      	lsrs	r3, r3, #16
 800049c:	f003 0303 	and.w	r3, r3, #3
 80004a0:	3301      	adds	r3, #1
 80004a2:	005b      	lsls	r3, r3, #1
 80004a4:	61bb      	str	r3, [r7, #24]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80004a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80004a8:	69bb      	ldr	r3, [r7, #24]
 80004aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	601a      	str	r2, [r3, #0]
    break;
 80004b2:	e039      	b.n	8000528 <RCC_GetClocksFreq+0x160>
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
  case 0x0C:  /* PLL R used as system clock  source */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80004b4:	4b3d      	ldr	r3, [pc, #244]	; (80005ac <RCC_GetClocksFreq+0x1e4>)
 80004b6:	685b      	ldr	r3, [r3, #4]
 80004b8:	0d9b      	lsrs	r3, r3, #22
 80004ba:	f003 0301 	and.w	r3, r3, #1
 80004be:	617b      	str	r3, [r7, #20]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80004c0:	4b3a      	ldr	r3, [pc, #232]	; (80005ac <RCC_GetClocksFreq+0x1e4>)
 80004c2:	685b      	ldr	r3, [r3, #4]
 80004c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80004c8:	613b      	str	r3, [r7, #16]
    
    if (pllsource != 0)
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d00c      	beq.n	80004ea <RCC_GetClocksFreq+0x122>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80004d0:	4a38      	ldr	r2, [pc, #224]	; (80005b4 <RCC_GetClocksFreq+0x1ec>)
 80004d2:	693b      	ldr	r3, [r7, #16]
 80004d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80004d8:	4a34      	ldr	r2, [pc, #208]	; (80005ac <RCC_GetClocksFreq+0x1e4>)
 80004da:	6852      	ldr	r2, [r2, #4]
 80004dc:	0992      	lsrs	r2, r2, #6
 80004de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80004e2:	fb02 f303 	mul.w	r3, r2, r3
 80004e6:	627b      	str	r3, [r7, #36]	; 0x24
 80004e8:	e00b      	b.n	8000502 <RCC_GetClocksFreq+0x13a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80004ea:	4a31      	ldr	r2, [pc, #196]	; (80005b0 <RCC_GetClocksFreq+0x1e8>)
 80004ec:	693b      	ldr	r3, [r7, #16]
 80004ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80004f2:	4a2e      	ldr	r2, [pc, #184]	; (80005ac <RCC_GetClocksFreq+0x1e4>)
 80004f4:	6852      	ldr	r2, [r2, #4]
 80004f6:	0992      	lsrs	r2, r2, #6
 80004f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80004fc:	fb02 f303 	mul.w	r3, r2, r3
 8000500:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
 8000502:	4b2a      	ldr	r3, [pc, #168]	; (80005ac <RCC_GetClocksFreq+0x1e4>)
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	0f1b      	lsrs	r3, r3, #28
 8000508:	f003 0307 	and.w	r3, r3, #7
 800050c:	3301      	adds	r3, #1
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	60fb      	str	r3, [r7, #12]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
 8000512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	fbb2 f2f3 	udiv	r2, r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	601a      	str	r2, [r3, #0]
    break;
 800051e:	e003      	b.n	8000528 <RCC_GetClocksFreq+0x160>
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	4a23      	ldr	r2, [pc, #140]	; (80005b0 <RCC_GetClocksFreq+0x1e8>)
 8000524:	601a      	str	r2, [r3, #0]
    break;
 8000526:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000528:	4b20      	ldr	r3, [pc, #128]	; (80005ac <RCC_GetClocksFreq+0x1e4>)
 800052a:	689b      	ldr	r3, [r3, #8]
 800052c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000530:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000532:	6a3b      	ldr	r3, [r7, #32]
 8000534:	091b      	lsrs	r3, r3, #4
 8000536:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000538:	4a1f      	ldr	r2, [pc, #124]	; (80005b8 <RCC_GetClocksFreq+0x1f0>)
 800053a:	6a3b      	ldr	r3, [r7, #32]
 800053c:	4413      	add	r3, r2
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	b2db      	uxtb	r3, r3
 8000542:	61fb      	str	r3, [r7, #28]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681a      	ldr	r2, [r3, #0]
 8000548:	69fb      	ldr	r3, [r7, #28]
 800054a:	40da      	lsrs	r2, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000550:	4b16      	ldr	r3, [pc, #88]	; (80005ac <RCC_GetClocksFreq+0x1e4>)
 8000552:	689b      	ldr	r3, [r3, #8]
 8000554:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000558:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 10;
 800055a:	6a3b      	ldr	r3, [r7, #32]
 800055c:	0a9b      	lsrs	r3, r3, #10
 800055e:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000560:	4a15      	ldr	r2, [pc, #84]	; (80005b8 <RCC_GetClocksFreq+0x1f0>)
 8000562:	6a3b      	ldr	r3, [r7, #32]
 8000564:	4413      	add	r3, r2
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	b2db      	uxtb	r3, r3
 800056a:	61fb      	str	r3, [r7, #28]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	685a      	ldr	r2, [r3, #4]
 8000570:	69fb      	ldr	r3, [r7, #28]
 8000572:	40da      	lsrs	r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000578:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <RCC_GetClocksFreq+0x1e4>)
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000580:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 13;
 8000582:	6a3b      	ldr	r3, [r7, #32]
 8000584:	0b5b      	lsrs	r3, r3, #13
 8000586:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000588:	4a0b      	ldr	r2, [pc, #44]	; (80005b8 <RCC_GetClocksFreq+0x1f0>)
 800058a:	6a3b      	ldr	r3, [r7, #32]
 800058c:	4413      	add	r3, r2
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	b2db      	uxtb	r3, r3
 8000592:	61fb      	str	r3, [r7, #28]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	685a      	ldr	r2, [r3, #4]
 8000598:	69fb      	ldr	r3, [r7, #28]
 800059a:	40da      	lsrs	r2, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	60da      	str	r2, [r3, #12]
}
 80005a0:	bf00      	nop
 80005a2:	372c      	adds	r7, #44	; 0x2c
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	40023800 	.word	0x40023800
 80005b0:	00f42400 	.word	0x00f42400
 80005b4:	007a1200 	.word	0x007a1200
 80005b8:	20000000 	.word	0x20000000

080005bc <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	460b      	mov	r3, r1
 80005c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80005c8:	78fb      	ldrb	r3, [r7, #3]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d006      	beq.n	80005dc <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80005ce:	490a      	ldr	r1, [pc, #40]	; (80005f8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80005d0:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80005d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4313      	orrs	r3, r2
 80005d8:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80005da:	e006      	b.n	80005ea <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80005dc:	4906      	ldr	r1, [pc, #24]	; (80005f8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80005e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	43db      	mvns	r3, r3
 80005e6:	4013      	ands	r3, r2
 80005e8:	630b      	str	r3, [r1, #48]	; 0x30
}
 80005ea:	bf00      	nop
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	40023800 	.word	0x40023800

080005fc <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	460b      	mov	r3, r1
 8000606:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000608:	78fb      	ldrb	r3, [r7, #3]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d006      	beq.n	800061c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800060e:	490a      	ldr	r1, [pc, #40]	; (8000638 <RCC_APB1PeriphClockCmd+0x3c>)
 8000610:	4b09      	ldr	r3, [pc, #36]	; (8000638 <RCC_APB1PeriphClockCmd+0x3c>)
 8000612:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4313      	orrs	r3, r2
 8000618:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800061a:	e006      	b.n	800062a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800061c:	4906      	ldr	r1, [pc, #24]	; (8000638 <RCC_APB1PeriphClockCmd+0x3c>)
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <RCC_APB1PeriphClockCmd+0x3c>)
 8000620:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	43db      	mvns	r3, r3
 8000626:	4013      	ands	r3, r2
 8000628:	640b      	str	r3, [r1, #64]	; 0x40
}
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	40023800 	.word	0x40023800

0800063c <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08a      	sub	sp, #40	; 0x28
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000646:	2300      	movs	r3, #0
 8000648:	627b      	str	r3, [r7, #36]	; 0x24
 800064a:	2300      	movs	r3, #0
 800064c:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800064e:	2300      	movs	r3, #0
 8000650:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000652:	2300      	movs	r3, #0
 8000654:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	8a1b      	ldrh	r3, [r3, #16]
 800065a:	b29b      	uxth	r3, r3
 800065c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800065e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000660:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000664:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	88db      	ldrh	r3, [r3, #6]
 800066a:	461a      	mov	r2, r3
 800066c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800066e:	4313      	orrs	r3, r2
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000674:	b29a      	uxth	r2, r3
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	899b      	ldrh	r3, [r3, #12]
 800067e:	b29b      	uxth	r3, r3
 8000680:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000684:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000688:	f023 030c 	bic.w	r3, r3, #12
 800068c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	889a      	ldrh	r2, [r3, #4]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	891b      	ldrh	r3, [r3, #8]
 8000696:	4313      	orrs	r3, r2
 8000698:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800069e:	4313      	orrs	r3, r2
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	461a      	mov	r2, r3
 80006a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a6:	4313      	orrs	r3, r2
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80006aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	8a9b      	ldrh	r3, [r3, #20]
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80006ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	899b      	ldrh	r3, [r3, #12]
 80006c6:	461a      	mov	r2, r3
 80006c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ca:	4313      	orrs	r3, r2
 80006cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80006ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80006d6:	f107 0308 	add.w	r3, r7, #8
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff fe74 	bl	80003c8 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a30      	ldr	r2, [pc, #192]	; (80007a4 <USART_Init+0x168>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d003      	beq.n	80006f0 <USART_Init+0xb4>
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4a2f      	ldr	r2, [pc, #188]	; (80007a8 <USART_Init+0x16c>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d102      	bne.n	80006f6 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	623b      	str	r3, [r7, #32]
 80006f4:	e001      	b.n	80006fa <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80006f6:	693b      	ldr	r3, [r7, #16]
 80006f8:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	899b      	ldrh	r3, [r3, #12]
 80006fe:	b29b      	uxth	r3, r3
 8000700:	b21b      	sxth	r3, r3
 8000702:	2b00      	cmp	r3, #0
 8000704:	da0c      	bge.n	8000720 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000706:	6a3a      	ldr	r2, [r7, #32]
 8000708:	4613      	mov	r3, r2
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	4413      	add	r3, r2
 800070e:	009a      	lsls	r2, r3, #2
 8000710:	441a      	add	r2, r3
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	fbb2 f3f3 	udiv	r3, r2, r3
 800071c:	61fb      	str	r3, [r7, #28]
 800071e:	e00b      	b.n	8000738 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000720:	6a3a      	ldr	r2, [r7, #32]
 8000722:	4613      	mov	r3, r2
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	4413      	add	r3, r2
 8000728:	009a      	lsls	r2, r3, #2
 800072a:	441a      	add	r2, r3
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	fbb2 f3f3 	udiv	r3, r2, r3
 8000736:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000738:	69fb      	ldr	r3, [r7, #28]
 800073a:	4a1c      	ldr	r2, [pc, #112]	; (80007ac <USART_Init+0x170>)
 800073c:	fba2 2303 	umull	r2, r3, r2, r3
 8000740:	095b      	lsrs	r3, r3, #5
 8000742:	011b      	lsls	r3, r3, #4
 8000744:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000748:	091b      	lsrs	r3, r3, #4
 800074a:	2264      	movs	r2, #100	; 0x64
 800074c:	fb02 f303 	mul.w	r3, r2, r3
 8000750:	69fa      	ldr	r2, [r7, #28]
 8000752:	1ad3      	subs	r3, r2, r3
 8000754:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	899b      	ldrh	r3, [r3, #12]
 800075a:	b29b      	uxth	r3, r3
 800075c:	b21b      	sxth	r3, r3
 800075e:	2b00      	cmp	r3, #0
 8000760:	da0c      	bge.n	800077c <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000762:	69bb      	ldr	r3, [r7, #24]
 8000764:	00db      	lsls	r3, r3, #3
 8000766:	3332      	adds	r3, #50	; 0x32
 8000768:	4a10      	ldr	r2, [pc, #64]	; (80007ac <USART_Init+0x170>)
 800076a:	fba2 2303 	umull	r2, r3, r2, r3
 800076e:	095b      	lsrs	r3, r3, #5
 8000770:	f003 0307 	and.w	r3, r3, #7
 8000774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000776:	4313      	orrs	r3, r2
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
 800077a:	e00b      	b.n	8000794 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800077c:	69bb      	ldr	r3, [r7, #24]
 800077e:	011b      	lsls	r3, r3, #4
 8000780:	3332      	adds	r3, #50	; 0x32
 8000782:	4a0a      	ldr	r2, [pc, #40]	; (80007ac <USART_Init+0x170>)
 8000784:	fba2 2303 	umull	r2, r3, r2, r3
 8000788:	095b      	lsrs	r3, r3, #5
 800078a:	f003 030f 	and.w	r3, r3, #15
 800078e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000790:	4313      	orrs	r3, r2
 8000792:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000796:	b29a      	uxth	r2, r3
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	811a      	strh	r2, [r3, #8]
}
 800079c:	bf00      	nop
 800079e:	3728      	adds	r7, #40	; 0x28
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40011000 	.word	0x40011000
 80007a8:	40011400 	.word	0x40011400
 80007ac:	51eb851f 	.word	0x51eb851f

080007b0 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	460b      	mov	r3, r1
 80007ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80007bc:	78fb      	ldrb	r3, [r7, #3]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d008      	beq.n	80007d4 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	899b      	ldrh	r3, [r3, #12]
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007cc:	b29a      	uxth	r2, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 80007d2:	e007      	b.n	80007e4 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	899b      	ldrh	r3, [r3, #12]
 80007d8:	b29b      	uxth	r3, r3
 80007da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80007de:	b29a      	uxth	r2, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	819a      	strh	r2, [r3, #12]
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	889b      	ldrh	r3, [r3, #4]
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000802:	b29b      	uxth	r3, r3
}
 8000804:	4618      	mov	r0, r3
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000810:	b480      	push	{r7}
 8000812:	b087      	sub	sp, #28
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	460b      	mov	r3, r1
 800081a:	807b      	strh	r3, [r7, #2]
 800081c:	4613      	mov	r3, r2
 800081e:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	2300      	movs	r3, #0
 800082a:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000834:	887b      	ldrh	r3, [r7, #2]
 8000836:	b2db      	uxtb	r3, r3
 8000838:	095b      	lsrs	r3, r3, #5
 800083a:	b2db      	uxtb	r3, r3
 800083c:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800083e:	887b      	ldrh	r3, [r7, #2]
 8000840:	f003 031f 	and.w	r3, r3, #31
 8000844:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8000846:	2201      	movs	r2, #1
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	fa02 f303 	lsl.w	r3, r2, r3
 800084e:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000850:	693b      	ldr	r3, [r7, #16]
 8000852:	2b01      	cmp	r3, #1
 8000854:	d103      	bne.n	800085e <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	330c      	adds	r3, #12
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	e009      	b.n	8000872 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800085e:	693b      	ldr	r3, [r7, #16]
 8000860:	2b02      	cmp	r3, #2
 8000862:	d103      	bne.n	800086c <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	3310      	adds	r3, #16
 8000868:	617b      	str	r3, [r7, #20]
 800086a:	e002      	b.n	8000872 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	3314      	adds	r3, #20
 8000870:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000872:	787b      	ldrb	r3, [r7, #1]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d006      	beq.n	8000886 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	697a      	ldr	r2, [r7, #20]
 800087c:	6811      	ldr	r1, [r2, #0]
 800087e:	68ba      	ldr	r2, [r7, #8]
 8000880:	430a      	orrs	r2, r1
 8000882:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000884:	e006      	b.n	8000894 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	697a      	ldr	r2, [r7, #20]
 800088a:	6811      	ldr	r1, [r2, #0]
 800088c:	68ba      	ldr	r2, [r7, #8]
 800088e:	43d2      	mvns	r2, r2
 8000890:	400a      	ands	r2, r1
 8000892:	601a      	str	r2, [r3, #0]
}
 8000894:	bf00      	nop
 8000896:	371c      	adds	r7, #28
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b087      	sub	sp, #28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	460b      	mov	r3, r1
 80008aa:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
 80008b4:	2300      	movs	r3, #0
 80008b6:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80008b8:	2300      	movs	r3, #0
 80008ba:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80008bc:	887b      	ldrh	r3, [r7, #2]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	095b      	lsrs	r3, r3, #5
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80008c6:	887b      	ldrh	r3, [r7, #2]
 80008c8:	f003 031f 	and.w	r3, r3, #31
 80008cc:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80008ce:	2201      	movs	r2, #1
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	fa02 f303 	lsl.w	r3, r2, r3
 80008d6:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d107      	bne.n	80008ee <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	899b      	ldrh	r3, [r3, #12]
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	461a      	mov	r2, r3
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	4013      	ands	r3, r2
 80008ea:	617b      	str	r3, [r7, #20]
 80008ec:	e011      	b.n	8000912 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	2b02      	cmp	r3, #2
 80008f2:	d107      	bne.n	8000904 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	8a1b      	ldrh	r3, [r3, #16]
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	461a      	mov	r2, r3
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	4013      	ands	r3, r2
 8000900:	617b      	str	r3, [r7, #20]
 8000902:	e006      	b.n	8000912 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	8a9b      	ldrh	r3, [r3, #20]
 8000908:	b29b      	uxth	r3, r3
 800090a:	461a      	mov	r2, r3
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	4013      	ands	r3, r2
 8000910:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000912:	887b      	ldrh	r3, [r7, #2]
 8000914:	0a1b      	lsrs	r3, r3, #8
 8000916:	b29b      	uxth	r3, r3
 8000918:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800091a:	2201      	movs	r2, #1
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	881b      	ldrh	r3, [r3, #0]
 8000928:	b29b      	uxth	r3, r3
 800092a:	461a      	mov	r2, r3
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	4013      	ands	r3, r2
 8000930:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d005      	beq.n	8000944 <USART_GetITStatus+0xa4>
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d002      	beq.n	8000944 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 800093e:	2301      	movs	r3, #1
 8000940:	74fb      	strb	r3, [r7, #19]
 8000942:	e001      	b.n	8000948 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000944:	2300      	movs	r3, #0
 8000946:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000948:	7cfb      	ldrb	r3, [r7, #19]
}
 800094a:	4618      	mov	r0, r3
 800094c:	371c      	adds	r7, #28
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
	...

08000958 <TM_Delay_Init>:
#include "delay.h"

uint32_t multiplier;

void TM_Delay_Init(void) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
    RCC_ClocksTypeDef RCC_Clocks;

    /* Get system clocks */
    RCC_GetClocksFreq(&RCC_Clocks);
 800095e:	463b      	mov	r3, r7
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff fd31 	bl	80003c8 <RCC_GetClocksFreq>

    /* While loop takes 4 cycles */
    /* For 1 us delay, we need to divide with 4M */
    multiplier = RCC_Clocks.HCLK_Frequency / 4000000;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4a04      	ldr	r2, [pc, #16]	; (800097c <TM_Delay_Init+0x24>)
 800096a:	fba2 2303 	umull	r2, r3, r2, r3
 800096e:	0d1b      	lsrs	r3, r3, #20
 8000970:	4a03      	ldr	r2, [pc, #12]	; (8000980 <TM_Delay_Init+0x28>)
 8000972:	6013      	str	r3, [r2, #0]
}
 8000974:	bf00      	nop
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	431bde83 	.word	0x431bde83
 8000980:	2000002c 	.word	0x2000002c

08000984 <TM_DelayMillis>:
    micros = micros * multiplier - 10;
    /* 4 cycles for one loop */
    while (micros--);
}

void TM_DelayMillis(uint32_t millis) {
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
    /* Multiply millis with multipler */
    /* Substract 10 */
    millis = 1000 * millis * multiplier - 10;
 800098c:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <TM_DelayMillis+0x38>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	687a      	ldr	r2, [r7, #4]
 8000992:	fb02 f303 	mul.w	r3, r2, r3
 8000996:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800099a:	fb02 f303 	mul.w	r3, r2, r3
 800099e:	3b0a      	subs	r3, #10
 80009a0:	607b      	str	r3, [r7, #4]
    /* 4 cycles for one loop */
    while (millis--);
 80009a2:	bf00      	nop
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	1e5a      	subs	r2, r3, #1
 80009a8:	607a      	str	r2, [r7, #4]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d1fa      	bne.n	80009a4 <TM_DelayMillis+0x20>
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	2000002c 	.word	0x2000002c

080009c0 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80009ca:	4909      	ldr	r1, [pc, #36]	; (80009f0 <NVIC_EnableIRQ+0x30>)
 80009cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d0:	095b      	lsrs	r3, r3, #5
 80009d2:	79fa      	ldrb	r2, [r7, #7]
 80009d4:	f002 021f 	and.w	r2, r2, #31
 80009d8:	2001      	movs	r0, #1
 80009da:	fa00 f202 	lsl.w	r2, r0, r2
 80009de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	e000e100 	.word	0xe000e100

080009f4 <Init_USART2>:

uint32_t multiplier;


void Init_USART2()
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0

    /* Bit configuration structure for GPIOA PIN9 and PIN10 */
    GPIO_InitTypeDef GPIO_InitStruct;
    /* Enalbe clock for USART1, AFIO and GPIOA */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80009fa:	2101      	movs	r1, #1
 80009fc:	2008      	movs	r0, #8
 80009fe:	f7ff fddd 	bl	80005bc <RCC_AHB1PeriphClockCmd>



    GPIO_PinAFConfig(GPIOD, GPIO_PinSource5, GPIO_AF_USART2);
 8000a02:	2207      	movs	r2, #7
 8000a04:	2105      	movs	r1, #5
 8000a06:	481f      	ldr	r0, [pc, #124]	; (8000a84 <Init_USART2+0x90>)
 8000a08:	f7ff fc94 	bl	8000334 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource6, GPIO_AF_USART2);
 8000a0c:	2207      	movs	r2, #7
 8000a0e:	2106      	movs	r1, #6
 8000a10:	481c      	ldr	r0, [pc, #112]	; (8000a84 <Init_USART2+0x90>)
 8000a12:	f7ff fc8f 	bl	8000334 <GPIO_PinAFConfig>
    // Initialize pins as alternating function
    GPIO_InitStruct.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6;
 8000a16:	2360      	movs	r3, #96	; 0x60
 8000a18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	753b      	strb	r3, [r7, #20]
    GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	75bb      	strb	r3, [r7, #22]
    GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000a22:	2301      	movs	r3, #1
 8000a24:	75fb      	strb	r3, [r7, #23]
    GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a26:	f107 0310 	add.w	r3, r7, #16
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4815      	ldr	r0, [pc, #84]	; (8000a84 <Init_USART2+0x90>)
 8000a2e:	f7ff fbf3 	bl	8000218 <GPIO_Init>


    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8000a32:	2101      	movs	r1, #1
 8000a34:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000a38:	f7ff fde0 	bl	80005fc <RCC_APB1PeriphClockCmd>

    USART_Cmd(USART2, ENABLE);
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	4812      	ldr	r0, [pc, #72]	; (8000a88 <Init_USART2+0x94>)
 8000a40:	f7ff feb6 	bl	80007b0 <USART_Cmd>

	USART_InitTypeDef USART_InitStructure;
	USART_InitStructure.USART_BaudRate = 9600;
 8000a44:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000a48:	603b      	str	r3, [r7, #0]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	80bb      	strh	r3, [r7, #4]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	80fb      	strh	r3, [r7, #6]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000a52:	230c      	movs	r3, #12
 8000a54:	817b      	strh	r3, [r7, #10]
	USART_InitStructure.USART_Parity = USART_Parity_No ;
 8000a56:	2300      	movs	r3, #0
 8000a58:	813b      	strh	r3, [r7, #8]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	81bb      	strh	r3, [r7, #12]
    /* Configure USART1 */
    USART_Init(USART2, &USART_InitStructure);
 8000a5e:	463b      	mov	r3, r7
 8000a60:	4619      	mov	r1, r3
 8000a62:	4809      	ldr	r0, [pc, #36]	; (8000a88 <Init_USART2+0x94>)
 8000a64:	f7ff fdea 	bl	800063c <USART_Init>
    /* Enable RXNE interrupt */
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	f240 5125 	movw	r1, #1317	; 0x525
 8000a6e:	4806      	ldr	r0, [pc, #24]	; (8000a88 <Init_USART2+0x94>)
 8000a70:	f7ff fece 	bl	8000810 <USART_ITConfig>


	// Enable interrupt fromUSART2(NVIC level)
	NVIC_EnableIRQ(USART2_IRQn);
 8000a74:	2026      	movs	r0, #38	; 0x26
 8000a76:	f7ff ffa3 	bl	80009c0 <NVIC_EnableIRQ>
}
 8000a7a:	bf00      	nop
 8000a7c:	3718      	adds	r7, #24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40020c00 	.word	0x40020c00
 8000a88:	40004400 	.word	0x40004400

08000a8c <USART2_IRQHandler>:

void USART2_IRQHandler()
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	//USART_SendData(USART2, 'T');
	// Do Something    /* RXNE handler */
	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8000a90:	f240 5125 	movw	r1, #1317	; 0x525
 8000a94:	4808      	ldr	r0, [pc, #32]	; (8000ab8 <USART2_IRQHandler+0x2c>)
 8000a96:	f7ff ff03 	bl	80008a0 <USART_GetITStatus>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d008      	beq.n	8000ab2 <USART2_IRQHandler+0x26>
	{
		printf("%c\n",(char)USART_ReceiveData(USART2));
 8000aa0:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <USART2_IRQHandler+0x2c>)
 8000aa2:	f7ff fea5 	bl	80007f0 <USART_ReceiveData>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4803      	ldr	r0, [pc, #12]	; (8000abc <USART2_IRQHandler+0x30>)
 8000aae:	f000 fa59 	bl	8000f64 <iprintf>

	}
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40004400 	.word	0x40004400
 8000abc:	08001058 	.word	0x08001058

08000ac0 <main>:

int main() {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0

	SystemInit();
 8000ac4:	f000 f8a2 	bl	8000c0c <SystemInit>

	TM_Delay_Init();
 8000ac8:	f7ff ff46 	bl	8000958 <TM_Delay_Init>

	Init_USART2();
 8000acc:	f7ff ff92 	bl	80009f4 <Init_USART2>
	/* GPIOG Peripheral clock enable */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	2002      	movs	r0, #2
 8000ad4:	f7ff fd72 	bl	80005bc <RCC_AHB1PeriphClockCmd>

	/* Configure PG6 and PG8 in output pushpull mode */
	GPIO_InitStructure.GPIO_Pin = LED_PIN;
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <main+0x64>)
 8000ada:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ade:	601a      	str	r2, [r3, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000ae0:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <main+0x64>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	711a      	strb	r2, [r3, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000ae6:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <main+0x64>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	719a      	strb	r2, [r3, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000aec:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <main+0x64>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000af2:	490c      	ldr	r1, [pc, #48]	; (8000b24 <main+0x64>)
 8000af4:	480c      	ldr	r0, [pc, #48]	; (8000b28 <main+0x68>)
 8000af6:	f7ff fb8f 	bl	8000218 <GPIO_Init>

	printf("Ovo je zaista kul stvar");
 8000afa:	480c      	ldr	r0, [pc, #48]	; (8000b2c <main+0x6c>)
 8000afc:	f000 fa32 	bl	8000f64 <iprintf>
	while (1)
	{
	// Set PG6 and PG8
	GPIOB->BSRRL = LED_PIN;
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <main+0x68>)
 8000b02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b06:	831a      	strh	r2, [r3, #24]

	TM_DelayMillis(5000);
 8000b08:	f241 3088 	movw	r0, #5000	; 0x1388
 8000b0c:	f7ff ff3a 	bl	8000984 <TM_DelayMillis>

	GPIOB->BSRRH = LED_PIN;
 8000b10:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <main+0x68>)
 8000b12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b16:	835a      	strh	r2, [r3, #26]

	TM_DelayMillis(5000);
 8000b18:	f241 3088 	movw	r0, #5000	; 0x1388
 8000b1c:	f7ff ff32 	bl	8000984 <TM_DelayMillis>
	GPIOB->BSRRL = LED_PIN;
 8000b20:	e7ee      	b.n	8000b00 <main+0x40>
 8000b22:	bf00      	nop
 8000b24:	20000030 	.word	0x20000030
 8000b28:	40020400 	.word	0x40020400
 8000b2c:	0800105c 	.word	0x0800105c

08000b30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000b30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b68 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000b34:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b36:	e003      	b.n	8000b40 <LoopCopyDataInit>

08000b38 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b3a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b3c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b3e:	3104      	adds	r1, #4

08000b40 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b40:	480b      	ldr	r0, [pc, #44]	; (8000b70 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b42:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b44:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b46:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b48:	d3f6      	bcc.n	8000b38 <CopyDataInit>
  ldr  r2, =_sbss
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b4c:	e002      	b.n	8000b54 <LoopFillZerobss>

08000b4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000b4e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b50:	f842 3b04 	str.w	r3, [r2], #4

08000b54 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b56:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b58:	d3f9      	bcc.n	8000b4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b5a:	f000 f857 	bl	8000c0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b5e:	f000 fa4b 	bl	8000ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b62:	f7ff ffad 	bl	8000ac0 <main>
  bx  lr    
 8000b66:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000b68:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000b6c:	0800107c 	.word	0x0800107c
  ldr  r0, =_sdata
 8000b70:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b74:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000b78:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000b7c:	20000038 	.word	0x20000038

08000b80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b80:	e7fe      	b.n	8000b80 <ADC_IRQHandler>

08000b82 <ITM_SendChar>:
    \param [in]     ch  Character to transmit.

    \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000b82:	b480      	push	{r7}
 8000b84:	b083      	sub	sp, #12
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
  if ((ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8000b8a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b8e:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d012      	beq.n	8000bc0 <ITM_SendChar+0x3e>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
 8000b9a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b9e:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000ba2:	f003 0301 	and.w	r3, r3, #1
  if ((ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d00a      	beq.n	8000bc0 <ITM_SendChar+0x3e>
  {
    while (ITM->PORT[0].u32 == 0);
 8000baa:	bf00      	nop
 8000bac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d0fa      	beq.n	8000bac <ITM_SendChar+0x2a>
    ITM->PORT[0].u8 = (uint8_t) ch;
 8000bb6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000bc0:	687b      	ldr	r3, [r7, #4]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b086      	sub	sp, #24
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	60f8      	str	r0, [r7, #12]
 8000bd6:	60b9      	str	r1, [r7, #8]
 8000bd8:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	/* return len; */
	int i = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++)
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
 8000be2:	e009      	b.n	8000bf8 <_write+0x2a>
	{
		ITM_SendChar(*ptr++);
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	1c5a      	adds	r2, r3, #1
 8000be8:	60ba      	str	r2, [r7, #8]
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ffc8 	bl	8000b82 <ITM_SendChar>
	for(i=0;i<len;i++)
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	697a      	ldr	r2, [r7, #20]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	dbf1      	blt.n	8000be4 <_write+0x16>
	}
	
	return len;
 8000c00:	687b      	ldr	r3, [r7, #4]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3718      	adds	r7, #24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c10:	4a16      	ldr	r2, [pc, #88]	; (8000c6c <SystemInit+0x60>)
 8000c12:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <SystemInit+0x60>)
 8000c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c20:	4a13      	ldr	r2, [pc, #76]	; (8000c70 <SystemInit+0x64>)
 8000c22:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <SystemInit+0x64>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f043 0301 	orr.w	r3, r3, #1
 8000c2a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c2c:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <SystemInit+0x64>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000c32:	4a0f      	ldr	r2, [pc, #60]	; (8000c70 <SystemInit+0x64>)
 8000c34:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <SystemInit+0x64>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000c3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c40:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <SystemInit+0x64>)
 8000c44:	4a0b      	ldr	r2, [pc, #44]	; (8000c74 <SystemInit+0x68>)
 8000c46:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000c48:	4a09      	ldr	r2, [pc, #36]	; (8000c70 <SystemInit+0x64>)
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <SystemInit+0x64>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c52:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <SystemInit+0x64>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c5a:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <SystemInit+0x60>)
 8000c5c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c60:	609a      	str	r2, [r3, #8]
#endif
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00
 8000c70:	40023800 	.word	0x40023800
 8000c74:	24003010 	.word	0x24003010

08000c78 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b087      	sub	sp, #28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
	int div = 1;
 8000c84:	2301      	movs	r3, #1
 8000c86:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8000c88:	e004      	b.n	8000c94 <ts_itoa+0x1c>
		div *= base;
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	fb02 f303 	mul.w	r3, r2, r3
 8000c92:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	68ba      	ldr	r2, [r7, #8]
 8000c98:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d2f3      	bcs.n	8000c8a <ts_itoa+0x12>

	while (div != 0)
 8000ca2:	e029      	b.n	8000cf8 <ts_itoa+0x80>
	{
		int num = d/div;
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	68ba      	ldr	r2, [r7, #8]
 8000ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cac:	613b      	str	r3, [r7, #16]
		d = d%div;
 8000cae:	697a      	ldr	r2, [r7, #20]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	fbb3 f1f2 	udiv	r1, r3, r2
 8000cb6:	fb02 f201 	mul.w	r2, r2, r1
 8000cba:	1a9b      	subs	r3, r3, r2
 8000cbc:	60bb      	str	r3, [r7, #8]
		div /= base;
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cc6:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	2b09      	cmp	r3, #9
 8000ccc:	dd0a      	ble.n	8000ce4 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	1c59      	adds	r1, r3, #1
 8000cd4:	68fa      	ldr	r2, [r7, #12]
 8000cd6:	6011      	str	r1, [r2, #0]
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	b2d2      	uxtb	r2, r2
 8000cdc:	3237      	adds	r2, #55	; 0x37
 8000cde:	b2d2      	uxtb	r2, r2
 8000ce0:	701a      	strb	r2, [r3, #0]
 8000ce2:	e009      	b.n	8000cf8 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	1c59      	adds	r1, r3, #1
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	6011      	str	r1, [r2, #0]
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	3230      	adds	r2, #48	; 0x30
 8000cf4:	b2d2      	uxtb	r2, r2
 8000cf6:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d1d2      	bne.n	8000ca4 <ts_itoa+0x2c>
	}
}
 8000cfe:	bf00      	nop
 8000d00:	371c      	adds	r7, #28
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b088      	sub	sp, #32
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	60f8      	str	r0, [r7, #12]
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8000d1a:	e07d      	b.n	8000e18 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b25      	cmp	r3, #37	; 0x25
 8000d22:	d171      	bne.n	8000e08 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	3301      	adds	r3, #1
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b64      	cmp	r3, #100	; 0x64
 8000d30:	d01e      	beq.n	8000d70 <ts_formatstring+0x66>
 8000d32:	2b64      	cmp	r3, #100	; 0x64
 8000d34:	dc06      	bgt.n	8000d44 <ts_formatstring+0x3a>
 8000d36:	2b58      	cmp	r3, #88	; 0x58
 8000d38:	d050      	beq.n	8000ddc <ts_formatstring+0xd2>
 8000d3a:	2b63      	cmp	r3, #99	; 0x63
 8000d3c:	d00e      	beq.n	8000d5c <ts_formatstring+0x52>
 8000d3e:	2b25      	cmp	r3, #37	; 0x25
 8000d40:	d058      	beq.n	8000df4 <ts_formatstring+0xea>
 8000d42:	e05d      	b.n	8000e00 <ts_formatstring+0xf6>
 8000d44:	2b73      	cmp	r3, #115	; 0x73
 8000d46:	d02b      	beq.n	8000da0 <ts_formatstring+0x96>
 8000d48:	2b73      	cmp	r3, #115	; 0x73
 8000d4a:	dc02      	bgt.n	8000d52 <ts_formatstring+0x48>
 8000d4c:	2b69      	cmp	r3, #105	; 0x69
 8000d4e:	d00f      	beq.n	8000d70 <ts_formatstring+0x66>
 8000d50:	e056      	b.n	8000e00 <ts_formatstring+0xf6>
 8000d52:	2b75      	cmp	r3, #117	; 0x75
 8000d54:	d037      	beq.n	8000dc6 <ts_formatstring+0xbc>
 8000d56:	2b78      	cmp	r3, #120	; 0x78
 8000d58:	d040      	beq.n	8000ddc <ts_formatstring+0xd2>
 8000d5a:	e051      	b.n	8000e00 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	1c5a      	adds	r2, r3, #1
 8000d60:	60fa      	str	r2, [r7, #12]
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	1d11      	adds	r1, r2, #4
 8000d66:	6079      	str	r1, [r7, #4]
 8000d68:	6812      	ldr	r2, [r2, #0]
 8000d6a:	b2d2      	uxtb	r2, r2
 8000d6c:	701a      	strb	r2, [r3, #0]
				break;
 8000d6e:	e047      	b.n	8000e00 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	1d1a      	adds	r2, r3, #4
 8000d74:	607a      	str	r2, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	da07      	bge.n	8000d90 <ts_formatstring+0x86>
					{
						val *= -1;
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	425b      	negs	r3, r3
 8000d84:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	1c5a      	adds	r2, r3, #1
 8000d8a:	60fa      	str	r2, [r7, #12]
 8000d8c:	222d      	movs	r2, #45	; 0x2d
 8000d8e:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8000d90:	69f9      	ldr	r1, [r7, #28]
 8000d92:	f107 030c 	add.w	r3, r7, #12
 8000d96:	220a      	movs	r2, #10
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff6d 	bl	8000c78 <ts_itoa>
				}
				break;
 8000d9e:	e02f      	b.n	8000e00 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	1d1a      	adds	r2, r3, #4
 8000da4:	607a      	str	r2, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8000daa:	e007      	b.n	8000dbc <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	1c5a      	adds	r2, r3, #1
 8000db0:	60fa      	str	r2, [r7, #12]
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	1c51      	adds	r1, r2, #1
 8000db6:	61b9      	str	r1, [r7, #24]
 8000db8:	7812      	ldrb	r2, [r2, #0]
 8000dba:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d1f3      	bne.n	8000dac <ts_formatstring+0xa2>
					}
				}
				break;
 8000dc4:	e01c      	b.n	8000e00 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	1d1a      	adds	r2, r3, #4
 8000dca:	607a      	str	r2, [r7, #4]
 8000dcc:	6819      	ldr	r1, [r3, #0]
 8000dce:	f107 030c 	add.w	r3, r7, #12
 8000dd2:	220a      	movs	r2, #10
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ff4f 	bl	8000c78 <ts_itoa>
				break;
 8000dda:	e011      	b.n	8000e00 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	1d1a      	adds	r2, r3, #4
 8000de0:	607a      	str	r2, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4619      	mov	r1, r3
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	2210      	movs	r2, #16
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff43 	bl	8000c78 <ts_itoa>
				break;
 8000df2:	e005      	b.n	8000e00 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	1c5a      	adds	r2, r3, #1
 8000df8:	60fa      	str	r2, [r7, #12]
 8000dfa:	2225      	movs	r2, #37	; 0x25
 8000dfc:	701a      	strb	r2, [r3, #0]
				  break;
 8000dfe:	bf00      	nop
			}
			fmt++;
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	3301      	adds	r3, #1
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	e007      	b.n	8000e18 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	1c5a      	adds	r2, r3, #1
 8000e0c:	60fa      	str	r2, [r7, #12]
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	1c51      	adds	r1, r2, #1
 8000e12:	60b9      	str	r1, [r7, #8]
 8000e14:	7812      	ldrb	r2, [r2, #0]
 8000e16:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	f47f af7d 	bne.w	8000d1c <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	2200      	movs	r2, #0
 8000e26:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	1ad3      	subs	r3, r2, r3
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3720      	adds	r7, #32
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
	int length = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 8000e46:	e081      	b.n	8000f4c <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b25      	cmp	r3, #37	; 0x25
 8000e4e:	d177      	bne.n	8000f40 <ts_formatlength+0x108>
		{
			++fmt;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3301      	adds	r3, #1
 8000e54:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	3b58      	subs	r3, #88	; 0x58
 8000e5c:	2b20      	cmp	r3, #32
 8000e5e:	d86a      	bhi.n	8000f36 <ts_formatlength+0xfe>
 8000e60:	a201      	add	r2, pc, #4	; (adr r2, 8000e68 <ts_formatlength+0x30>)
 8000e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e66:	bf00      	nop
 8000e68:	08000f29 	.word	0x08000f29
 8000e6c:	08000f37 	.word	0x08000f37
 8000e70:	08000f37 	.word	0x08000f37
 8000e74:	08000f37 	.word	0x08000f37
 8000e78:	08000f37 	.word	0x08000f37
 8000e7c:	08000f37 	.word	0x08000f37
 8000e80:	08000f37 	.word	0x08000f37
 8000e84:	08000f37 	.word	0x08000f37
 8000e88:	08000f37 	.word	0x08000f37
 8000e8c:	08000f37 	.word	0x08000f37
 8000e90:	08000f37 	.word	0x08000f37
 8000e94:	08000eed 	.word	0x08000eed
 8000e98:	08000efb 	.word	0x08000efb
 8000e9c:	08000f37 	.word	0x08000f37
 8000ea0:	08000f37 	.word	0x08000f37
 8000ea4:	08000f37 	.word	0x08000f37
 8000ea8:	08000f37 	.word	0x08000f37
 8000eac:	08000efb 	.word	0x08000efb
 8000eb0:	08000f37 	.word	0x08000f37
 8000eb4:	08000f37 	.word	0x08000f37
 8000eb8:	08000f37 	.word	0x08000f37
 8000ebc:	08000f37 	.word	0x08000f37
 8000ec0:	08000f37 	.word	0x08000f37
 8000ec4:	08000f37 	.word	0x08000f37
 8000ec8:	08000f37 	.word	0x08000f37
 8000ecc:	08000f37 	.word	0x08000f37
 8000ed0:	08000f37 	.word	0x08000f37
 8000ed4:	08000f09 	.word	0x08000f09
 8000ed8:	08000f37 	.word	0x08000f37
 8000edc:	08000efb 	.word	0x08000efb
 8000ee0:	08000f37 	.word	0x08000f37
 8000ee4:	08000f37 	.word	0x08000f37
 8000ee8:	08000f29 	.word	0x08000f29
			{
			  case 'c':
		  		  va_arg(va, int);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	3304      	adds	r3, #4
 8000ef0:	603b      	str	r3, [r7, #0]
				  ++length;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	60fb      	str	r3, [r7, #12]
				  break;
 8000ef8:	e025      	b.n	8000f46 <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	330b      	adds	r3, #11
 8000efe:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	3304      	adds	r3, #4
 8000f04:	603b      	str	r3, [r7, #0]
				  break;
 8000f06:	e01e      	b.n	8000f46 <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	1d1a      	adds	r2, r3, #4
 8000f0c:	603a      	str	r2, [r7, #0]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 8000f12:	e002      	b.n	8000f1a <ts_formatlength+0xe2>
			  			  ++length;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	3301      	adds	r3, #1
 8000f18:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	1c5a      	adds	r2, r3, #1
 8000f1e:	60ba      	str	r2, [r7, #8]
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1f6      	bne.n	8000f14 <ts_formatlength+0xdc>
			  	  }
				  break;
 8000f26:	e00e      	b.n	8000f46 <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	3308      	adds	r3, #8
 8000f2c:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	3304      	adds	r3, #4
 8000f32:	603b      	str	r3, [r7, #0]
				  break;
 8000f34:	e007      	b.n	8000f46 <ts_formatlength+0x10e>
			  default:
				  ++length;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	60fb      	str	r3, [r7, #12]
				  break;
 8000f3c:	bf00      	nop
 8000f3e:	e002      	b.n	8000f46 <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	3301      	adds	r3, #1
 8000f44:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	f47f af79 	bne.w	8000e48 <ts_formatlength+0x10>
	}
	return length;
 8000f56:	68fb      	ldr	r3, [r7, #12]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 8000f64:	b40f      	push	{r0, r1, r2, r3}
 8000f66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
	int length = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 8000f72:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f76:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 8000f78:	6839      	ldr	r1, [r7, #0]
 8000f7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f7c:	f7ff ff5c 	bl	8000e38 <ts_formatlength>
 8000f80:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 8000f82:	466b      	mov	r3, sp
 8000f84:	461e      	mov	r6, r3
		char buf[length];
 8000f86:	68f9      	ldr	r1, [r7, #12]
 8000f88:	1e4b      	subs	r3, r1, #1
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	461a      	mov	r2, r3
 8000f90:	f04f 0300 	mov.w	r3, #0
 8000f94:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8000f98:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8000f9c:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	f04f 0300 	mov.w	r3, #0
 8000fa8:	00dd      	lsls	r5, r3, #3
 8000faa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8000fae:	00d4      	lsls	r4, r2, #3
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	3307      	adds	r3, #7
 8000fb4:	08db      	lsrs	r3, r3, #3
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	ebad 0d03 	sub.w	sp, sp, r3
 8000fbc:	466b      	mov	r3, sp
 8000fbe:	3300      	adds	r3, #0
 8000fc0:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 8000fc2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fc6:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	683a      	ldr	r2, [r7, #0]
 8000fcc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fe9b 	bl	8000d0a <ts_formatstring>
 8000fd4:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	68fa      	ldr	r2, [r7, #12]
 8000fda:	4619      	mov	r1, r3
 8000fdc:	2001      	movs	r0, #1
 8000fde:	f7ff fdf6 	bl	8000bce <_write>
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ff2:	b004      	add	sp, #16
 8000ff4:	4770      	bx	lr
	...

08000ff8 <__libc_init_array>:
 8000ff8:	b570      	push	{r4, r5, r6, lr}
 8000ffa:	4e0d      	ldr	r6, [pc, #52]	; (8001030 <__libc_init_array+0x38>)
 8000ffc:	4c0d      	ldr	r4, [pc, #52]	; (8001034 <__libc_init_array+0x3c>)
 8000ffe:	1ba4      	subs	r4, r4, r6
 8001000:	10a4      	asrs	r4, r4, #2
 8001002:	2500      	movs	r5, #0
 8001004:	42a5      	cmp	r5, r4
 8001006:	d109      	bne.n	800101c <__libc_init_array+0x24>
 8001008:	4e0b      	ldr	r6, [pc, #44]	; (8001038 <__libc_init_array+0x40>)
 800100a:	4c0c      	ldr	r4, [pc, #48]	; (800103c <__libc_init_array+0x44>)
 800100c:	f000 f818 	bl	8001040 <_init>
 8001010:	1ba4      	subs	r4, r4, r6
 8001012:	10a4      	asrs	r4, r4, #2
 8001014:	2500      	movs	r5, #0
 8001016:	42a5      	cmp	r5, r4
 8001018:	d105      	bne.n	8001026 <__libc_init_array+0x2e>
 800101a:	bd70      	pop	{r4, r5, r6, pc}
 800101c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001020:	4798      	blx	r3
 8001022:	3501      	adds	r5, #1
 8001024:	e7ee      	b.n	8001004 <__libc_init_array+0xc>
 8001026:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800102a:	4798      	blx	r3
 800102c:	3501      	adds	r5, #1
 800102e:	e7f2      	b.n	8001016 <__libc_init_array+0x1e>
 8001030:	08001074 	.word	0x08001074
 8001034:	08001074 	.word	0x08001074
 8001038:	08001074 	.word	0x08001074
 800103c:	08001078 	.word	0x08001078

08001040 <_init>:
 8001040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001042:	bf00      	nop
 8001044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001046:	bc08      	pop	{r3}
 8001048:	469e      	mov	lr, r3
 800104a:	4770      	bx	lr

0800104c <_fini>:
 800104c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800104e:	bf00      	nop
 8001050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001052:	bc08      	pop	{r3}
 8001054:	469e      	mov	lr, r3
 8001056:	4770      	bx	lr
