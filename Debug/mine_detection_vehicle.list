
mine_detection_vehicle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000714  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080008ec  080008ec  000108ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000904  08000904  00010904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000908  08000908  00010908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  0001090c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000024  20000000  0800090c  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000024  0800090c  00020024  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0001090c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000463f  00000000  00000000  0001093c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000ba3  00000000  00000000  00014f7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000428  00000000  00000000  00015b20  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c0  00000000  00000000  00015f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000166a  00000000  00000000  00016308  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000160d  00000000  00000000  00017972  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00018f7f  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000011a4  00000000  00000000  00018ffc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000000 	.word	0x20000000
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080008d4 	.word	0x080008d4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000004 	.word	0x20000004
 8000214:	080008d4 	.word	0x080008d4

08000218 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000218:	b480      	push	{r7}
 800021a:	b087      	sub	sp, #28
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000222:	2300      	movs	r3, #0
 8000224:	617b      	str	r3, [r7, #20]
 8000226:	2300      	movs	r3, #0
 8000228:	613b      	str	r3, [r7, #16]
 800022a:	2300      	movs	r3, #0
 800022c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800022e:	2300      	movs	r3, #0
 8000230:	617b      	str	r3, [r7, #20]
 8000232:	e076      	b.n	8000322 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000234:	2201      	movs	r2, #1
 8000236:	697b      	ldr	r3, [r7, #20]
 8000238:	fa02 f303 	lsl.w	r3, r2, r3
 800023c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	693b      	ldr	r3, [r7, #16]
 8000244:	4013      	ands	r3, r2
 8000246:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000248:	68fa      	ldr	r2, [r7, #12]
 800024a:	693b      	ldr	r3, [r7, #16]
 800024c:	429a      	cmp	r2, r3
 800024e:	d165      	bne.n	800031c <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	681a      	ldr	r2, [r3, #0]
 8000254:	697b      	ldr	r3, [r7, #20]
 8000256:	005b      	lsls	r3, r3, #1
 8000258:	2103      	movs	r1, #3
 800025a:	fa01 f303 	lsl.w	r3, r1, r3
 800025e:	43db      	mvns	r3, r3
 8000260:	401a      	ands	r2, r3
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	681a      	ldr	r2, [r3, #0]
 800026a:	683b      	ldr	r3, [r7, #0]
 800026c:	791b      	ldrb	r3, [r3, #4]
 800026e:	4619      	mov	r1, r3
 8000270:	697b      	ldr	r3, [r7, #20]
 8000272:	005b      	lsls	r3, r3, #1
 8000274:	fa01 f303 	lsl.w	r3, r1, r3
 8000278:	431a      	orrs	r2, r3
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	791b      	ldrb	r3, [r3, #4]
 8000282:	2b01      	cmp	r3, #1
 8000284:	d003      	beq.n	800028e <GPIO_Init+0x76>
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	791b      	ldrb	r3, [r3, #4]
 800028a:	2b02      	cmp	r3, #2
 800028c:	d12e      	bne.n	80002ec <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	689a      	ldr	r2, [r3, #8]
 8000292:	697b      	ldr	r3, [r7, #20]
 8000294:	005b      	lsls	r3, r3, #1
 8000296:	2103      	movs	r1, #3
 8000298:	fa01 f303 	lsl.w	r3, r1, r3
 800029c:	43db      	mvns	r3, r3
 800029e:	401a      	ands	r2, r3
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	689a      	ldr	r2, [r3, #8]
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	795b      	ldrb	r3, [r3, #5]
 80002ac:	4619      	mov	r1, r3
 80002ae:	697b      	ldr	r3, [r7, #20]
 80002b0:	005b      	lsls	r3, r3, #1
 80002b2:	fa01 f303 	lsl.w	r3, r1, r3
 80002b6:	431a      	orrs	r2, r3
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	685a      	ldr	r2, [r3, #4]
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	b29b      	uxth	r3, r3
 80002c4:	4619      	mov	r1, r3
 80002c6:	2301      	movs	r3, #1
 80002c8:	408b      	lsls	r3, r1
 80002ca:	43db      	mvns	r3, r3
 80002cc:	401a      	ands	r2, r3
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	685b      	ldr	r3, [r3, #4]
 80002d6:	683a      	ldr	r2, [r7, #0]
 80002d8:	7992      	ldrb	r2, [r2, #6]
 80002da:	4611      	mov	r1, r2
 80002dc:	697a      	ldr	r2, [r7, #20]
 80002de:	b292      	uxth	r2, r2
 80002e0:	fa01 f202 	lsl.w	r2, r1, r2
 80002e4:	b292      	uxth	r2, r2
 80002e6:	431a      	orrs	r2, r3
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	68da      	ldr	r2, [r3, #12]
 80002f0:	697b      	ldr	r3, [r7, #20]
 80002f2:	b29b      	uxth	r3, r3
 80002f4:	005b      	lsls	r3, r3, #1
 80002f6:	2103      	movs	r1, #3
 80002f8:	fa01 f303 	lsl.w	r3, r1, r3
 80002fc:	43db      	mvns	r3, r3
 80002fe:	401a      	ands	r2, r3
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	68da      	ldr	r2, [r3, #12]
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	79db      	ldrb	r3, [r3, #7]
 800030c:	4619      	mov	r1, r3
 800030e:	697b      	ldr	r3, [r7, #20]
 8000310:	005b      	lsls	r3, r3, #1
 8000312:	fa01 f303 	lsl.w	r3, r1, r3
 8000316:	431a      	orrs	r2, r3
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800031c:	697b      	ldr	r3, [r7, #20]
 800031e:	3301      	adds	r3, #1
 8000320:	617b      	str	r3, [r7, #20]
 8000322:	697b      	ldr	r3, [r7, #20]
 8000324:	2b0f      	cmp	r3, #15
 8000326:	d985      	bls.n	8000234 <GPIO_Init+0x1c>
    }
  }
}
 8000328:	bf00      	nop
 800032a:	371c      	adds	r7, #28
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr

08000334 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	460b      	mov	r3, r1
 800033e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000340:	78fb      	ldrb	r3, [r7, #3]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d006      	beq.n	8000354 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000346:	490a      	ldr	r1, [pc, #40]	; (8000370 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000348:	4b09      	ldr	r3, [pc, #36]	; (8000370 <RCC_AHB1PeriphClockCmd+0x3c>)
 800034a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	4313      	orrs	r3, r2
 8000350:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000352:	e006      	b.n	8000362 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000354:	4906      	ldr	r1, [pc, #24]	; (8000370 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000356:	4b06      	ldr	r3, [pc, #24]	; (8000370 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	43db      	mvns	r3, r3
 800035e:	4013      	ands	r3, r2
 8000360:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000362:	bf00      	nop
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	40023800 	.word	0x40023800

08000374 <main>:
#include <stm32f4xx.h>
#include <stdio.h>
#define LED_PIN GPIO_Pin_14

GPIO_InitTypeDef  GPIO_InitStructure;
int main() {
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0

	SystemInit();
 8000378:	f000 f892 	bl	80004a0 <SystemInit>

	/* GPIOG Peripheral clock enable */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800037c:	2101      	movs	r1, #1
 800037e:	2002      	movs	r0, #2
 8000380:	f7ff ffd8 	bl	8000334 <RCC_AHB1PeriphClockCmd>

	/* Configure PG6 and PG8 in output pushpull mode */
	GPIO_InitStructure.GPIO_Pin = LED_PIN;
 8000384:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <main+0x44>)
 8000386:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800038a:	601a      	str	r2, [r3, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800038c:	4b0a      	ldr	r3, [pc, #40]	; (80003b8 <main+0x44>)
 800038e:	2201      	movs	r2, #1
 8000390:	711a      	strb	r2, [r3, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000392:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <main+0x44>)
 8000394:	2200      	movs	r2, #0
 8000396:	719a      	strb	r2, [r3, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000398:	4b07      	ldr	r3, [pc, #28]	; (80003b8 <main+0x44>)
 800039a:	2200      	movs	r2, #0
 800039c:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800039e:	4906      	ldr	r1, [pc, #24]	; (80003b8 <main+0x44>)
 80003a0:	4806      	ldr	r0, [pc, #24]	; (80003bc <main+0x48>)
 80003a2:	f7ff ff39 	bl	8000218 <GPIO_Init>

	printf("Ovo je zaista kul stvar");
 80003a6:	4806      	ldr	r0, [pc, #24]	; (80003c0 <main+0x4c>)
 80003a8:	f000 fa26 	bl	80007f8 <iprintf>
	while (1)
	{
	// Set PG6 and PG8
	GPIOB->BSRRL = LED_PIN;
 80003ac:	4b03      	ldr	r3, [pc, #12]	; (80003bc <main+0x48>)
 80003ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003b2:	831a      	strh	r2, [r3, #24]
 80003b4:	e7fa      	b.n	80003ac <main+0x38>
 80003b6:	bf00      	nop
 80003b8:	2000001c 	.word	0x2000001c
 80003bc:	40020400 	.word	0x40020400
 80003c0:	080008ec 	.word	0x080008ec

080003c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80003c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80003c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80003ca:	e003      	b.n	80003d4 <LoopCopyDataInit>

080003cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80003cc:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80003ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80003d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80003d2:	3104      	adds	r1, #4

080003d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003d4:	480b      	ldr	r0, [pc, #44]	; (8000404 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003d6:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003dc:	d3f6      	bcc.n	80003cc <CopyDataInit>
  ldr  r2, =_sbss
 80003de:	4a0b      	ldr	r2, [pc, #44]	; (800040c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003e0:	e002      	b.n	80003e8 <LoopFillZerobss>

080003e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80003e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003e4:	f842 3b04 	str.w	r3, [r2], #4

080003e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003e8:	4b09      	ldr	r3, [pc, #36]	; (8000410 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80003ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003ec:	d3f9      	bcc.n	80003e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003ee:	f000 f857 	bl	80004a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003f2:	f000 fa4b 	bl	800088c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003f6:	f7ff ffbd 	bl	8000374 <main>
  bx  lr    
 80003fa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80003fc:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000400:	0800090c 	.word	0x0800090c
  ldr  r0, =_sdata
 8000404:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000408:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 800040c:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8000410:	20000024 	.word	0x20000024

08000414 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000414:	e7fe      	b.n	8000414 <ADC_IRQHandler>

08000416 <ITM_SendChar>:
    \param [in]     ch  Character to transmit.

    \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000416:	b480      	push	{r7}
 8000418:	b083      	sub	sp, #12
 800041a:	af00      	add	r7, sp, #0
 800041c:	6078      	str	r0, [r7, #4]
  if ((ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 800041e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000422:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000426:	f003 0301 	and.w	r3, r3, #1
 800042a:	2b00      	cmp	r3, #0
 800042c:	d012      	beq.n	8000454 <ITM_SendChar+0x3e>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
 800042e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000432:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000436:	f003 0301 	and.w	r3, r3, #1
  if ((ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 800043a:	2b00      	cmp	r3, #0
 800043c:	d00a      	beq.n	8000454 <ITM_SendChar+0x3e>
  {
    while (ITM->PORT[0].u32 == 0);
 800043e:	bf00      	nop
 8000440:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d0fa      	beq.n	8000440 <ITM_SendChar+0x2a>
    ITM->PORT[0].u8 = (uint8_t) ch;
 800044a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	b2d2      	uxtb	r2, r2
 8000452:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000454:	687b      	ldr	r3, [r7, #4]
}
 8000456:	4618      	mov	r0, r3
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr

08000462 <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8000462:	b580      	push	{r7, lr}
 8000464:	b086      	sub	sp, #24
 8000466:	af00      	add	r7, sp, #0
 8000468:	60f8      	str	r0, [r7, #12]
 800046a:	60b9      	str	r1, [r7, #8]
 800046c:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	/* return len; */
	int i = 0;
 800046e:	2300      	movs	r3, #0
 8000470:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++)
 8000472:	2300      	movs	r3, #0
 8000474:	617b      	str	r3, [r7, #20]
 8000476:	e009      	b.n	800048c <_write+0x2a>
	{
		ITM_SendChar(*ptr++);
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	1c5a      	adds	r2, r3, #1
 800047c:	60ba      	str	r2, [r7, #8]
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	4618      	mov	r0, r3
 8000482:	f7ff ffc8 	bl	8000416 <ITM_SendChar>
	for(i=0;i<len;i++)
 8000486:	697b      	ldr	r3, [r7, #20]
 8000488:	3301      	adds	r3, #1
 800048a:	617b      	str	r3, [r7, #20]
 800048c:	697a      	ldr	r2, [r7, #20]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	429a      	cmp	r2, r3
 8000492:	dbf1      	blt.n	8000478 <_write+0x16>
	}
	
	return len;
 8000494:	687b      	ldr	r3, [r7, #4]
}
 8000496:	4618      	mov	r0, r3
 8000498:	3718      	adds	r7, #24
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
	...

080004a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004a4:	4a16      	ldr	r2, [pc, #88]	; (8000500 <SystemInit+0x60>)
 80004a6:	4b16      	ldr	r3, [pc, #88]	; (8000500 <SystemInit+0x60>)
 80004a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80004b4:	4a13      	ldr	r2, [pc, #76]	; (8000504 <SystemInit+0x64>)
 80004b6:	4b13      	ldr	r3, [pc, #76]	; (8000504 <SystemInit+0x64>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	f043 0301 	orr.w	r3, r3, #1
 80004be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80004c0:	4b10      	ldr	r3, [pc, #64]	; (8000504 <SystemInit+0x64>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80004c6:	4a0f      	ldr	r2, [pc, #60]	; (8000504 <SystemInit+0x64>)
 80004c8:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <SystemInit+0x64>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80004d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004d4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80004d6:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <SystemInit+0x64>)
 80004d8:	4a0b      	ldr	r2, [pc, #44]	; (8000508 <SystemInit+0x68>)
 80004da:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80004dc:	4a09      	ldr	r2, [pc, #36]	; (8000504 <SystemInit+0x64>)
 80004de:	4b09      	ldr	r3, [pc, #36]	; (8000504 <SystemInit+0x64>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <SystemInit+0x64>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80004ee:	4b04      	ldr	r3, [pc, #16]	; (8000500 <SystemInit+0x60>)
 80004f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004f4:	609a      	str	r2, [r3, #8]
#endif
}
 80004f6:	bf00      	nop
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr
 8000500:	e000ed00 	.word	0xe000ed00
 8000504:	40023800 	.word	0x40023800
 8000508:	24003010 	.word	0x24003010

0800050c <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 800050c:	b480      	push	{r7}
 800050e:	b087      	sub	sp, #28
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
	int div = 1;
 8000518:	2301      	movs	r3, #1
 800051a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800051c:	e004      	b.n	8000528 <ts_itoa+0x1c>
		div *= base;
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	fb02 f303 	mul.w	r3, r2, r3
 8000526:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	68ba      	ldr	r2, [r7, #8]
 800052c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	429a      	cmp	r2, r3
 8000534:	d2f3      	bcs.n	800051e <ts_itoa+0x12>

	while (div != 0)
 8000536:	e029      	b.n	800058c <ts_itoa+0x80>
	{
		int num = d/div;
 8000538:	697b      	ldr	r3, [r7, #20]
 800053a:	68ba      	ldr	r2, [r7, #8]
 800053c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000540:	613b      	str	r3, [r7, #16]
		d = d%div;
 8000542:	697a      	ldr	r2, [r7, #20]
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	fbb3 f1f2 	udiv	r1, r3, r2
 800054a:	fb02 f201 	mul.w	r2, r2, r1
 800054e:	1a9b      	subs	r3, r3, r2
 8000550:	60bb      	str	r3, [r7, #8]
		div /= base;
 8000552:	697a      	ldr	r2, [r7, #20]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	fb92 f3f3 	sdiv	r3, r2, r3
 800055a:	617b      	str	r3, [r7, #20]
		if (num > 9)
 800055c:	693b      	ldr	r3, [r7, #16]
 800055e:	2b09      	cmp	r3, #9
 8000560:	dd0a      	ble.n	8000578 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	1c59      	adds	r1, r3, #1
 8000568:	68fa      	ldr	r2, [r7, #12]
 800056a:	6011      	str	r1, [r2, #0]
 800056c:	693a      	ldr	r2, [r7, #16]
 800056e:	b2d2      	uxtb	r2, r2
 8000570:	3237      	adds	r2, #55	; 0x37
 8000572:	b2d2      	uxtb	r2, r2
 8000574:	701a      	strb	r2, [r3, #0]
 8000576:	e009      	b.n	800058c <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	1c59      	adds	r1, r3, #1
 800057e:	68fa      	ldr	r2, [r7, #12]
 8000580:	6011      	str	r1, [r2, #0]
 8000582:	693a      	ldr	r2, [r7, #16]
 8000584:	b2d2      	uxtb	r2, r2
 8000586:	3230      	adds	r2, #48	; 0x30
 8000588:	b2d2      	uxtb	r2, r2
 800058a:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 800058c:	697b      	ldr	r3, [r7, #20]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d1d2      	bne.n	8000538 <ts_itoa+0x2c>
	}
}
 8000592:	bf00      	nop
 8000594:	371c      	adds	r7, #28
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr

0800059e <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 800059e:	b580      	push	{r7, lr}
 80005a0:	b088      	sub	sp, #32
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	60f8      	str	r0, [r7, #12]
 80005a6:	60b9      	str	r1, [r7, #8]
 80005a8:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	617b      	str	r3, [r7, #20]
	while(*fmt)
 80005ae:	e07d      	b.n	80006ac <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b25      	cmp	r3, #37	; 0x25
 80005b6:	d171      	bne.n	800069c <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	3301      	adds	r3, #1
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	2b64      	cmp	r3, #100	; 0x64
 80005c4:	d01e      	beq.n	8000604 <ts_formatstring+0x66>
 80005c6:	2b64      	cmp	r3, #100	; 0x64
 80005c8:	dc06      	bgt.n	80005d8 <ts_formatstring+0x3a>
 80005ca:	2b58      	cmp	r3, #88	; 0x58
 80005cc:	d050      	beq.n	8000670 <ts_formatstring+0xd2>
 80005ce:	2b63      	cmp	r3, #99	; 0x63
 80005d0:	d00e      	beq.n	80005f0 <ts_formatstring+0x52>
 80005d2:	2b25      	cmp	r3, #37	; 0x25
 80005d4:	d058      	beq.n	8000688 <ts_formatstring+0xea>
 80005d6:	e05d      	b.n	8000694 <ts_formatstring+0xf6>
 80005d8:	2b73      	cmp	r3, #115	; 0x73
 80005da:	d02b      	beq.n	8000634 <ts_formatstring+0x96>
 80005dc:	2b73      	cmp	r3, #115	; 0x73
 80005de:	dc02      	bgt.n	80005e6 <ts_formatstring+0x48>
 80005e0:	2b69      	cmp	r3, #105	; 0x69
 80005e2:	d00f      	beq.n	8000604 <ts_formatstring+0x66>
 80005e4:	e056      	b.n	8000694 <ts_formatstring+0xf6>
 80005e6:	2b75      	cmp	r3, #117	; 0x75
 80005e8:	d037      	beq.n	800065a <ts_formatstring+0xbc>
 80005ea:	2b78      	cmp	r3, #120	; 0x78
 80005ec:	d040      	beq.n	8000670 <ts_formatstring+0xd2>
 80005ee:	e051      	b.n	8000694 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	1c5a      	adds	r2, r3, #1
 80005f4:	60fa      	str	r2, [r7, #12]
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	1d11      	adds	r1, r2, #4
 80005fa:	6079      	str	r1, [r7, #4]
 80005fc:	6812      	ldr	r2, [r2, #0]
 80005fe:	b2d2      	uxtb	r2, r2
 8000600:	701a      	strb	r2, [r3, #0]
				break;
 8000602:	e047      	b.n	8000694 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	1d1a      	adds	r2, r3, #4
 8000608:	607a      	str	r2, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	2b00      	cmp	r3, #0
 8000612:	da07      	bge.n	8000624 <ts_formatstring+0x86>
					{
						val *= -1;
 8000614:	69fb      	ldr	r3, [r7, #28]
 8000616:	425b      	negs	r3, r3
 8000618:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	1c5a      	adds	r2, r3, #1
 800061e:	60fa      	str	r2, [r7, #12]
 8000620:	222d      	movs	r2, #45	; 0x2d
 8000622:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8000624:	69f9      	ldr	r1, [r7, #28]
 8000626:	f107 030c 	add.w	r3, r7, #12
 800062a:	220a      	movs	r2, #10
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ff6d 	bl	800050c <ts_itoa>
				}
				break;
 8000632:	e02f      	b.n	8000694 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	1d1a      	adds	r2, r3, #4
 8000638:	607a      	str	r2, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	61bb      	str	r3, [r7, #24]
					while (*arg)
 800063e:	e007      	b.n	8000650 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	1c5a      	adds	r2, r3, #1
 8000644:	60fa      	str	r2, [r7, #12]
 8000646:	69ba      	ldr	r2, [r7, #24]
 8000648:	1c51      	adds	r1, r2, #1
 800064a:	61b9      	str	r1, [r7, #24]
 800064c:	7812      	ldrb	r2, [r2, #0]
 800064e:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8000650:	69bb      	ldr	r3, [r7, #24]
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d1f3      	bne.n	8000640 <ts_formatstring+0xa2>
					}
				}
				break;
 8000658:	e01c      	b.n	8000694 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	1d1a      	adds	r2, r3, #4
 800065e:	607a      	str	r2, [r7, #4]
 8000660:	6819      	ldr	r1, [r3, #0]
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	220a      	movs	r2, #10
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ff4f 	bl	800050c <ts_itoa>
				break;
 800066e:	e011      	b.n	8000694 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	1d1a      	adds	r2, r3, #4
 8000674:	607a      	str	r2, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4619      	mov	r1, r3
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	2210      	movs	r2, #16
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ff43 	bl	800050c <ts_itoa>
				break;
 8000686:	e005      	b.n	8000694 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	1c5a      	adds	r2, r3, #1
 800068c:	60fa      	str	r2, [r7, #12]
 800068e:	2225      	movs	r2, #37	; 0x25
 8000690:	701a      	strb	r2, [r3, #0]
				  break;
 8000692:	bf00      	nop
			}
			fmt++;
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	3301      	adds	r3, #1
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	e007      	b.n	80006ac <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	1c5a      	adds	r2, r3, #1
 80006a0:	60fa      	str	r2, [r7, #12]
 80006a2:	68ba      	ldr	r2, [r7, #8]
 80006a4:	1c51      	adds	r1, r2, #1
 80006a6:	60b9      	str	r1, [r7, #8]
 80006a8:	7812      	ldrb	r2, [r2, #0]
 80006aa:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	f47f af7d 	bne.w	80005b0 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	2200      	movs	r2, #0
 80006ba:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	461a      	mov	r2, r3
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	1ad3      	subs	r3, r2, r3
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3720      	adds	r7, #32
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
	int length = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 80006da:	e081      	b.n	80007e0 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b25      	cmp	r3, #37	; 0x25
 80006e2:	d177      	bne.n	80007d4 <ts_formatlength+0x108>
		{
			++fmt;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	3301      	adds	r3, #1
 80006e8:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	3b58      	subs	r3, #88	; 0x58
 80006f0:	2b20      	cmp	r3, #32
 80006f2:	d86a      	bhi.n	80007ca <ts_formatlength+0xfe>
 80006f4:	a201      	add	r2, pc, #4	; (adr r2, 80006fc <ts_formatlength+0x30>)
 80006f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fa:	bf00      	nop
 80006fc:	080007bd 	.word	0x080007bd
 8000700:	080007cb 	.word	0x080007cb
 8000704:	080007cb 	.word	0x080007cb
 8000708:	080007cb 	.word	0x080007cb
 800070c:	080007cb 	.word	0x080007cb
 8000710:	080007cb 	.word	0x080007cb
 8000714:	080007cb 	.word	0x080007cb
 8000718:	080007cb 	.word	0x080007cb
 800071c:	080007cb 	.word	0x080007cb
 8000720:	080007cb 	.word	0x080007cb
 8000724:	080007cb 	.word	0x080007cb
 8000728:	08000781 	.word	0x08000781
 800072c:	0800078f 	.word	0x0800078f
 8000730:	080007cb 	.word	0x080007cb
 8000734:	080007cb 	.word	0x080007cb
 8000738:	080007cb 	.word	0x080007cb
 800073c:	080007cb 	.word	0x080007cb
 8000740:	0800078f 	.word	0x0800078f
 8000744:	080007cb 	.word	0x080007cb
 8000748:	080007cb 	.word	0x080007cb
 800074c:	080007cb 	.word	0x080007cb
 8000750:	080007cb 	.word	0x080007cb
 8000754:	080007cb 	.word	0x080007cb
 8000758:	080007cb 	.word	0x080007cb
 800075c:	080007cb 	.word	0x080007cb
 8000760:	080007cb 	.word	0x080007cb
 8000764:	080007cb 	.word	0x080007cb
 8000768:	0800079d 	.word	0x0800079d
 800076c:	080007cb 	.word	0x080007cb
 8000770:	0800078f 	.word	0x0800078f
 8000774:	080007cb 	.word	0x080007cb
 8000778:	080007cb 	.word	0x080007cb
 800077c:	080007bd 	.word	0x080007bd
			{
			  case 'c':
		  		  va_arg(va, int);
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	3304      	adds	r3, #4
 8000784:	603b      	str	r3, [r7, #0]
				  ++length;
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	3301      	adds	r3, #1
 800078a:	60fb      	str	r3, [r7, #12]
				  break;
 800078c:	e025      	b.n	80007da <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	330b      	adds	r3, #11
 8000792:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	3304      	adds	r3, #4
 8000798:	603b      	str	r3, [r7, #0]
				  break;
 800079a:	e01e      	b.n	80007da <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	1d1a      	adds	r2, r3, #4
 80007a0:	603a      	str	r2, [r7, #0]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 80007a6:	e002      	b.n	80007ae <ts_formatlength+0xe2>
			  			  ++length;
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	3301      	adds	r3, #1
 80007ac:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	1c5a      	adds	r2, r3, #1
 80007b2:	60ba      	str	r2, [r7, #8]
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d1f6      	bne.n	80007a8 <ts_formatlength+0xdc>
			  	  }
				  break;
 80007ba:	e00e      	b.n	80007da <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	3308      	adds	r3, #8
 80007c0:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	3304      	adds	r3, #4
 80007c6:	603b      	str	r3, [r7, #0]
				  break;
 80007c8:	e007      	b.n	80007da <ts_formatlength+0x10e>
			  default:
				  ++length;
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	3301      	adds	r3, #1
 80007ce:	60fb      	str	r3, [r7, #12]
				  break;
 80007d0:	bf00      	nop
 80007d2:	e002      	b.n	80007da <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	3301      	adds	r3, #1
 80007d8:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	3301      	adds	r3, #1
 80007de:	607b      	str	r3, [r7, #4]
	while (*fmt)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	f47f af79 	bne.w	80006dc <ts_formatlength+0x10>
	}
	return length;
 80007ea:	68fb      	ldr	r3, [r7, #12]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3714      	adds	r7, #20
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 80007f8:	b40f      	push	{r0, r1, r2, r3}
 80007fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
	int length = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 8000806:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800080a:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 800080c:	6839      	ldr	r1, [r7, #0]
 800080e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000810:	f7ff ff5c 	bl	80006cc <ts_formatlength>
 8000814:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 8000816:	466b      	mov	r3, sp
 8000818:	461e      	mov	r6, r3
		char buf[length];
 800081a:	68f9      	ldr	r1, [r7, #12]
 800081c:	1e4b      	subs	r3, r1, #1
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	460b      	mov	r3, r1
 8000822:	461a      	mov	r2, r3
 8000824:	f04f 0300 	mov.w	r3, #0
 8000828:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 800082c:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8000830:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8000834:	460b      	mov	r3, r1
 8000836:	461a      	mov	r2, r3
 8000838:	f04f 0300 	mov.w	r3, #0
 800083c:	00dd      	lsls	r5, r3, #3
 800083e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8000842:	00d4      	lsls	r4, r2, #3
 8000844:	460b      	mov	r3, r1
 8000846:	3307      	adds	r3, #7
 8000848:	08db      	lsrs	r3, r3, #3
 800084a:	00db      	lsls	r3, r3, #3
 800084c:	ebad 0d03 	sub.w	sp, sp, r3
 8000850:	466b      	mov	r3, sp
 8000852:	3300      	adds	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 8000856:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800085a:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	683a      	ldr	r2, [r7, #0]
 8000860:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff fe9b 	bl	800059e <ts_formatstring>
 8000868:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	68fa      	ldr	r2, [r7, #12]
 800086e:	4619      	mov	r1, r3
 8000870:	2001      	movs	r0, #1
 8000872:	f7ff fdf6 	bl	8000462 <_write>
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 800087a:	68fb      	ldr	r3, [r7, #12]
}
 800087c:	4618      	mov	r0, r3
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000886:	b004      	add	sp, #16
 8000888:	4770      	bx	lr
	...

0800088c <__libc_init_array>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	4e0d      	ldr	r6, [pc, #52]	; (80008c4 <__libc_init_array+0x38>)
 8000890:	4c0d      	ldr	r4, [pc, #52]	; (80008c8 <__libc_init_array+0x3c>)
 8000892:	1ba4      	subs	r4, r4, r6
 8000894:	10a4      	asrs	r4, r4, #2
 8000896:	2500      	movs	r5, #0
 8000898:	42a5      	cmp	r5, r4
 800089a:	d109      	bne.n	80008b0 <__libc_init_array+0x24>
 800089c:	4e0b      	ldr	r6, [pc, #44]	; (80008cc <__libc_init_array+0x40>)
 800089e:	4c0c      	ldr	r4, [pc, #48]	; (80008d0 <__libc_init_array+0x44>)
 80008a0:	f000 f818 	bl	80008d4 <_init>
 80008a4:	1ba4      	subs	r4, r4, r6
 80008a6:	10a4      	asrs	r4, r4, #2
 80008a8:	2500      	movs	r5, #0
 80008aa:	42a5      	cmp	r5, r4
 80008ac:	d105      	bne.n	80008ba <__libc_init_array+0x2e>
 80008ae:	bd70      	pop	{r4, r5, r6, pc}
 80008b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80008b4:	4798      	blx	r3
 80008b6:	3501      	adds	r5, #1
 80008b8:	e7ee      	b.n	8000898 <__libc_init_array+0xc>
 80008ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80008be:	4798      	blx	r3
 80008c0:	3501      	adds	r5, #1
 80008c2:	e7f2      	b.n	80008aa <__libc_init_array+0x1e>
 80008c4:	08000904 	.word	0x08000904
 80008c8:	08000904 	.word	0x08000904
 80008cc:	08000904 	.word	0x08000904
 80008d0:	08000908 	.word	0x08000908

080008d4 <_init>:
 80008d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008d6:	bf00      	nop
 80008d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008da:	bc08      	pop	{r3}
 80008dc:	469e      	mov	lr, r3
 80008de:	4770      	bx	lr

080008e0 <_fini>:
 80008e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008e2:	bf00      	nop
 80008e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008e6:	bc08      	pop	{r3}
 80008e8:	469e      	mov	lr, r3
 80008ea:	4770      	bx	lr
